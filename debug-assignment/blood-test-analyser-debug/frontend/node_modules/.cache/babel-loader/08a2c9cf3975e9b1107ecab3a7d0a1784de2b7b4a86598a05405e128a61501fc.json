{"ast":null,"code":"var _excluded = [\"onMouseEnter\", \"onMouseLeave\", \"onClick\"],\n  _excluded2 = [\"value\", \"background\", \"tooltipPosition\"],\n  _excluded3 = [\"onMouseEnter\", \"onClick\", \"onMouseLeave\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\n/**\n * @fileOverview Render a group of bar\n */\n// eslint-disable-next-line max-classes-per-file\nimport * as React from 'react';\nimport { PureComponent, useCallback, useMemo, useRef, useState } from 'react';\nimport { clsx } from 'clsx';\nimport { Layer } from '../container/Layer';\nimport { SetErrorBarPreferredDirection } from './ErrorBar';\nimport { Cell } from '../component/Cell';\nimport { LabelList } from '../component/LabelList';\nimport { interpolateNumber, isNan, isNullish, mathSign, uniqueId } from '../util/DataUtils';\nimport { filterProps, findAllByType } from '../util/ReactUtils';\nimport { Global } from '../util/Global';\nimport { getBaseValueOfBar, getCateCoordinateOfBar, getNormalizedStackId, getTooltipNameProp, getValueByDataKey, truncateByDomain } from '../util/ChartUtils';\nimport { adaptEventsOfChild } from '../util/types';\nimport { BarRectangle, minPointSizeCallback } from '../util/BarUtils';\nimport { useMouseClickItemDispatch, useMouseEnterItemDispatch, useMouseLeaveItemDispatch } from '../context/tooltipContext';\nimport { SetTooltipEntrySettings } from '../state/SetTooltipEntrySettings';\nimport { ReportBar } from '../state/ReportBar';\nimport { CartesianGraphicalItemContext, SetErrorBarContext } from '../context/CartesianGraphicalItemContext';\nimport { GraphicalItemClipPath, useNeedsClip } from './GraphicalItemClipPath';\nimport { useChartLayout } from '../context/chartLayoutContext';\nimport { selectBarRectangles } from '../state/selectors/barSelectors';\nimport { useAppSelector } from '../state/hooks';\nimport { useIsPanorama } from '../context/PanoramaContext';\nimport { selectActiveTooltipDataKey, selectActiveTooltipIndex } from '../state/selectors/tooltipSelectors';\nimport { SetLegendPayload } from '../state/SetLegendPayload';\nimport { useAnimationId } from '../util/useAnimationId';\nimport { resolveDefaultProps } from '../util/resolveDefaultProps';\nimport { Animate } from '../animation/Animate';\nvar computeLegendPayloadFromBarData = props => {\n  var {\n    dataKey,\n    name,\n    fill,\n    legendType,\n    hide\n  } = props;\n  return [{\n    inactive: hide,\n    dataKey,\n    type: legendType,\n    color: fill,\n    value: getTooltipNameProp(name, dataKey),\n    payload: props\n  }];\n};\nfunction getTooltipEntrySettings(props) {\n  var {\n    dataKey,\n    stroke,\n    strokeWidth,\n    fill,\n    name,\n    hide,\n    unit\n  } = props;\n  return {\n    dataDefinedOnItem: undefined,\n    positions: undefined,\n    settings: {\n      stroke,\n      strokeWidth,\n      fill,\n      dataKey,\n      nameKey: undefined,\n      name: getTooltipNameProp(name, dataKey),\n      hide,\n      type: props.tooltipType,\n      color: props.fill,\n      unit\n    }\n  };\n}\nfunction BarBackground(props) {\n  var activeIndex = useAppSelector(selectActiveTooltipIndex);\n  var {\n    data,\n    dataKey,\n    background: backgroundFromProps,\n    allOtherBarProps\n  } = props;\n  var {\n      onMouseEnter: onMouseEnterFromProps,\n      onMouseLeave: onMouseLeaveFromProps,\n      onClick: onItemClickFromProps\n    } = allOtherBarProps,\n    restOfAllOtherProps = _objectWithoutProperties(allOtherBarProps, _excluded);\n  var onMouseEnterFromContext = useMouseEnterItemDispatch(onMouseEnterFromProps, dataKey);\n  var onMouseLeaveFromContext = useMouseLeaveItemDispatch(onMouseLeaveFromProps);\n  var onClickFromContext = useMouseClickItemDispatch(onItemClickFromProps, dataKey);\n  if (!backgroundFromProps || data == null) {\n    return null;\n  }\n  var backgroundProps = filterProps(backgroundFromProps, false);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, data.map((entry, i) => {\n    var {\n        value,\n        background: backgroundFromDataEntry,\n        tooltipPosition\n      } = entry,\n      rest = _objectWithoutProperties(entry, _excluded2);\n    if (!backgroundFromDataEntry) {\n      return null;\n    }\n\n    // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!\n    var onMouseEnter = onMouseEnterFromContext(entry, i);\n    // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!\n    var onMouseLeave = onMouseLeaveFromContext(entry, i);\n    // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!\n    var onClick = onClickFromContext(entry, i);\n    var barRectangleProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({\n      option: backgroundFromProps,\n      isActive: String(i) === activeIndex\n    }, rest), {}, {\n      // @ts-expect-error BarRectangle props do not accept `fill` property.\n      fill: '#eee'\n    }, backgroundFromDataEntry), backgroundProps), adaptEventsOfChild(restOfAllOtherProps, entry, i)), {}, {\n      onMouseEnter,\n      onMouseLeave,\n      onClick,\n      dataKey,\n      index: i,\n      className: 'recharts-bar-background-rectangle'\n    });\n    return /*#__PURE__*/React.createElement(BarRectangle, _extends({\n      key: \"background-bar-\".concat(i)\n    }, barRectangleProps));\n  }));\n}\nfunction BarRectangles(_ref) {\n  var {\n    data,\n    props,\n    showLabels\n  } = _ref;\n  var baseProps = filterProps(props, false);\n  var {\n    shape,\n    dataKey,\n    activeBar\n  } = props;\n  var activeIndex = useAppSelector(selectActiveTooltipIndex);\n  var activeDataKey = useAppSelector(selectActiveTooltipDataKey);\n  var {\n      onMouseEnter: onMouseEnterFromProps,\n      onClick: onItemClickFromProps,\n      onMouseLeave: onMouseLeaveFromProps\n    } = props,\n    restOfAllOtherProps = _objectWithoutProperties(props, _excluded3);\n  var onMouseEnterFromContext = useMouseEnterItemDispatch(onMouseEnterFromProps, dataKey);\n  var onMouseLeaveFromContext = useMouseLeaveItemDispatch(onMouseLeaveFromProps);\n  var onClickFromContext = useMouseClickItemDispatch(onItemClickFromProps, dataKey);\n  if (!data) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(React.Fragment, null, data.map((entry, i) => {\n    /*\n     * Bars support stacking, meaning that there can be multiple bars at the same x value.\n     * With Tooltip shared=false we only want to highlight the currently active Bar, not all.\n     *\n     * Also, if the tooltip is shared, we want to highlight all bars at the same x value\n     * regardless of the dataKey.\n     *\n     * With shared Tooltip, the activeDataKey is undefined.\n     */\n    var isActive = activeBar && String(i) === activeIndex && (activeDataKey == null || dataKey === activeDataKey);\n    var option = isActive ? activeBar : shape;\n    var barRectangleProps = _objectSpread(_objectSpread(_objectSpread({}, baseProps), entry), {}, {\n      isActive,\n      option,\n      index: i,\n      dataKey\n    });\n    return /*#__PURE__*/React.createElement(Layer, _extends({\n      className: \"recharts-bar-rectangle\"\n    }, adaptEventsOfChild(restOfAllOtherProps, entry, i), {\n      // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!\n      onMouseEnter: onMouseEnterFromContext(entry, i)\n      // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!\n      ,\n\n      onMouseLeave: onMouseLeaveFromContext(entry, i)\n      // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!\n      ,\n\n      onClick: onClickFromContext(entry, i)\n      // https://github.com/recharts/recharts/issues/5415\n      // eslint-disable-next-line react/no-array-index-key\n      ,\n\n      key: \"rectangle-\".concat(entry === null || entry === void 0 ? void 0 : entry.x, \"-\").concat(entry === null || entry === void 0 ? void 0 : entry.y, \"-\").concat(entry === null || entry === void 0 ? void 0 : entry.value, \"-\").concat(i)\n    }), /*#__PURE__*/React.createElement(BarRectangle, barRectangleProps));\n  }), showLabels && LabelList.renderCallByParent(props, data));\n}\nfunction RectanglesWithAnimation(_ref2) {\n  var {\n    props,\n    previousRectanglesRef\n  } = _ref2;\n  var {\n    data,\n    layout,\n    isAnimationActive,\n    animationBegin,\n    animationDuration,\n    animationEasing,\n    onAnimationEnd,\n    onAnimationStart\n  } = props;\n  var prevData = previousRectanglesRef.current;\n  var animationId = useAnimationId(props, 'recharts-bar-');\n  var [isAnimating, setIsAnimating] = useState(false);\n  var handleAnimationEnd = useCallback(() => {\n    if (typeof onAnimationEnd === 'function') {\n      onAnimationEnd();\n    }\n    setIsAnimating(false);\n  }, [onAnimationEnd]);\n  var handleAnimationStart = useCallback(() => {\n    if (typeof onAnimationStart === 'function') {\n      onAnimationStart();\n    }\n    setIsAnimating(true);\n  }, [onAnimationStart]);\n  return /*#__PURE__*/React.createElement(Animate, {\n    begin: animationBegin,\n    duration: animationDuration,\n    isActive: isAnimationActive,\n    easing: animationEasing,\n    from: {\n      t: 0\n    },\n    to: {\n      t: 1\n    },\n    onAnimationEnd: handleAnimationEnd,\n    onAnimationStart: handleAnimationStart,\n    key: animationId\n  }, _ref3 => {\n    var {\n      t\n    } = _ref3;\n    var stepData = t === 1 ? data : data.map((entry, index) => {\n      var prev = prevData && prevData[index];\n      if (prev) {\n        var interpolatorX = interpolateNumber(prev.x, entry.x);\n        var interpolatorY = interpolateNumber(prev.y, entry.y);\n        var interpolatorWidth = interpolateNumber(prev.width, entry.width);\n        var interpolatorHeight = interpolateNumber(prev.height, entry.height);\n        return _objectSpread(_objectSpread({}, entry), {}, {\n          x: interpolatorX(t),\n          y: interpolatorY(t),\n          width: interpolatorWidth(t),\n          height: interpolatorHeight(t)\n        });\n      }\n      if (layout === 'horizontal') {\n        var _interpolatorHeight = interpolateNumber(0, entry.height);\n        var h = _interpolatorHeight(t);\n        return _objectSpread(_objectSpread({}, entry), {}, {\n          y: entry.y + entry.height - h,\n          height: h\n        });\n      }\n      var interpolator = interpolateNumber(0, entry.width);\n      var w = interpolator(t);\n      return _objectSpread(_objectSpread({}, entry), {}, {\n        width: w\n      });\n    });\n    if (t > 0) {\n      // eslint-disable-next-line no-param-reassign\n      previousRectanglesRef.current = stepData;\n    }\n    return /*#__PURE__*/React.createElement(Layer, null, /*#__PURE__*/React.createElement(BarRectangles, {\n      props: props,\n      data: stepData,\n      showLabels: !isAnimating\n    }));\n  });\n}\nfunction RenderRectangles(props) {\n  var {\n    data,\n    isAnimationActive\n  } = props;\n  var previousRectanglesRef = useRef(null);\n  if (isAnimationActive && data && data.length && (previousRectanglesRef.current == null || previousRectanglesRef.current !== data)) {\n    return /*#__PURE__*/React.createElement(RectanglesWithAnimation, {\n      previousRectanglesRef: previousRectanglesRef,\n      props: props\n    });\n  }\n  return /*#__PURE__*/React.createElement(BarRectangles, {\n    props: props,\n    data: data,\n    showLabels: true\n  });\n}\nvar defaultMinPointSize = 0;\nvar errorBarDataPointFormatter = (dataPoint, dataKey) => {\n  /**\n   * if the value coming from `selectBarRectangles` is an array then this is a stacked bar chart.\n   * arr[1] represents end value of the bar since the data is in the form of [startValue, endValue].\n   * */\n  var value = Array.isArray(dataPoint.value) ? dataPoint.value[1] : dataPoint.value;\n  return {\n    x: dataPoint.x,\n    y: dataPoint.y,\n    value,\n    // @ts-expect-error getValueByDataKey does not validate the output type\n    errorVal: getValueByDataKey(dataPoint, dataKey)\n  };\n};\nclass BarWithState extends PureComponent {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"id\", uniqueId('recharts-bar-'));\n  }\n  render() {\n    var {\n      hide,\n      data,\n      dataKey,\n      className,\n      xAxisId,\n      yAxisId,\n      needClip,\n      background,\n      id,\n      layout\n    } = this.props;\n    if (hide) {\n      return null;\n    }\n    var layerClass = clsx('recharts-bar', className);\n    var clipPathId = isNullish(id) ? this.id : id;\n    return /*#__PURE__*/React.createElement(Layer, {\n      className: layerClass\n    }, needClip && /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(GraphicalItemClipPath, {\n      clipPathId: clipPathId,\n      xAxisId: xAxisId,\n      yAxisId: yAxisId\n    })), /*#__PURE__*/React.createElement(Layer, {\n      className: \"recharts-bar-rectangles\",\n      clipPath: needClip ? \"url(#clipPath-\".concat(clipPathId, \")\") : null\n    }, /*#__PURE__*/React.createElement(BarBackground, {\n      data: data,\n      dataKey: dataKey,\n      background: background,\n      allOtherBarProps: this.props\n    }), /*#__PURE__*/React.createElement(RenderRectangles, this.props)), /*#__PURE__*/React.createElement(SetErrorBarPreferredDirection, {\n      direction: layout === 'horizontal' ? 'y' : 'x'\n    }, this.props.children));\n  }\n}\nvar defaultBarProps = {\n  activeBar: false,\n  animationBegin: 0,\n  animationDuration: 400,\n  animationEasing: 'ease',\n  hide: false,\n  isAnimationActive: !Global.isSsr,\n  legendType: 'rect',\n  minPointSize: defaultMinPointSize,\n  xAxisId: 0,\n  yAxisId: 0\n};\nfunction BarImpl(props) {\n  var {\n    xAxisId,\n    yAxisId,\n    hide,\n    legendType,\n    minPointSize,\n    activeBar,\n    animationBegin,\n    animationDuration,\n    animationEasing,\n    isAnimationActive\n  } = resolveDefaultProps(props, defaultBarProps);\n  var {\n    needClip\n  } = useNeedsClip(xAxisId, yAxisId);\n  var layout = useChartLayout();\n  var isPanorama = useIsPanorama();\n  var barSettings = useMemo(() => ({\n    barSize: props.barSize,\n    data: undefined,\n    dataKey: props.dataKey,\n    maxBarSize: props.maxBarSize,\n    minPointSize,\n    stackId: getNormalizedStackId(props.stackId)\n  }), [props.barSize, props.dataKey, props.maxBarSize, minPointSize, props.stackId]);\n  var cells = findAllByType(props.children, Cell);\n  var rects = useAppSelector(state => selectBarRectangles(state, xAxisId, yAxisId, isPanorama, barSettings, cells));\n  if (layout !== 'vertical' && layout !== 'horizontal') {\n    return null;\n  }\n  var errorBarOffset;\n  var firstDataPoint = rects === null || rects === void 0 ? void 0 : rects[0];\n  if (firstDataPoint == null || firstDataPoint.height == null || firstDataPoint.width == null) {\n    errorBarOffset = 0;\n  } else {\n    errorBarOffset = layout === 'vertical' ? firstDataPoint.height / 2 : firstDataPoint.width / 2;\n  }\n  return /*#__PURE__*/React.createElement(SetErrorBarContext, {\n    xAxisId: xAxisId,\n    yAxisId: yAxisId,\n    data: rects,\n    dataPointFormatter: errorBarDataPointFormatter,\n    errorBarOffset: errorBarOffset\n  }, /*#__PURE__*/React.createElement(BarWithState, _extends({}, props, {\n    layout: layout,\n    needClip: needClip,\n    data: rects,\n    xAxisId: xAxisId,\n    yAxisId: yAxisId,\n    hide: hide,\n    legendType: legendType,\n    minPointSize: minPointSize,\n    activeBar: activeBar,\n    animationBegin: animationBegin,\n    animationDuration: animationDuration,\n    animationEasing: animationEasing,\n    isAnimationActive: isAnimationActive\n  })));\n}\nexport function computeBarRectangles(_ref4) {\n  var {\n    layout,\n    barSettings: {\n      dataKey,\n      minPointSize: minPointSizeProp\n    },\n    pos,\n    bandSize,\n    xAxis,\n    yAxis,\n    xAxisTicks,\n    yAxisTicks,\n    stackedData,\n    displayedData,\n    offset,\n    cells\n  } = _ref4;\n  var numericAxis = layout === 'horizontal' ? yAxis : xAxis;\n  // @ts-expect-error this assumes that the domain is always numeric, but doesn't check for it\n  var stackedDomain = stackedData ? numericAxis.scale.domain() : null;\n  var baseValue = getBaseValueOfBar({\n    numericAxis\n  });\n  return displayedData.map((entry, index) => {\n    var value, x, y, width, height, background;\n    if (stackedData) {\n      // we don't need to use dataStartIndex here, because stackedData is already sliced from the selector\n      value = truncateByDomain(stackedData[index], stackedDomain);\n    } else {\n      value = getValueByDataKey(entry, dataKey);\n      if (!Array.isArray(value)) {\n        value = [baseValue, value];\n      }\n    }\n    var minPointSize = minPointSizeCallback(minPointSizeProp, defaultMinPointSize)(value[1], index);\n    if (layout === 'horizontal') {\n      var _ref5;\n      var [baseValueScale, currentValueScale] = [yAxis.scale(value[0]), yAxis.scale(value[1])];\n      x = getCateCoordinateOfBar({\n        axis: xAxis,\n        ticks: xAxisTicks,\n        bandSize,\n        offset: pos.offset,\n        entry,\n        index\n      });\n      y = (_ref5 = currentValueScale !== null && currentValueScale !== void 0 ? currentValueScale : baseValueScale) !== null && _ref5 !== void 0 ? _ref5 : undefined;\n      width = pos.size;\n      var computedHeight = baseValueScale - currentValueScale;\n      height = isNan(computedHeight) ? 0 : computedHeight;\n      background = {\n        x,\n        y: offset.top,\n        width,\n        height: offset.height\n      };\n      if (Math.abs(minPointSize) > 0 && Math.abs(height) < Math.abs(minPointSize)) {\n        var delta = mathSign(height || minPointSize) * (Math.abs(minPointSize) - Math.abs(height));\n        y -= delta;\n        height += delta;\n      }\n    } else {\n      var [_baseValueScale, _currentValueScale] = [xAxis.scale(value[0]), xAxis.scale(value[1])];\n      x = _baseValueScale;\n      y = getCateCoordinateOfBar({\n        axis: yAxis,\n        ticks: yAxisTicks,\n        bandSize,\n        offset: pos.offset,\n        entry,\n        index\n      });\n      width = _currentValueScale - _baseValueScale;\n      height = pos.size;\n      background = {\n        x: offset.left,\n        y,\n        width: offset.width,\n        height\n      };\n      if (Math.abs(minPointSize) > 0 && Math.abs(width) < Math.abs(minPointSize)) {\n        var _delta = mathSign(width || minPointSize) * (Math.abs(minPointSize) - Math.abs(width));\n        width += _delta;\n      }\n    }\n    return _objectSpread(_objectSpread({}, entry), {}, {\n      x,\n      y,\n      width,\n      height,\n      value: stackedData ? value : value[1],\n      payload: entry,\n      background,\n      tooltipPosition: {\n        x: x + width / 2,\n        y: y + height / 2\n      }\n    }, cells && cells[index] && cells[index].props);\n  });\n}\nexport class Bar extends PureComponent {\n  render() {\n    // Report all props to Redux store first, before calling any hooks, to avoid circular dependencies.\n    return /*#__PURE__*/React.createElement(CartesianGraphicalItemContext, {\n      type: \"bar\"\n      // Bar does not allow setting data directly on the graphical item (why?)\n      ,\n\n      data: null,\n      xAxisId: this.props.xAxisId,\n      yAxisId: this.props.yAxisId,\n      zAxisId: 0,\n      dataKey: this.props.dataKey,\n      stackId: this.props.stackId,\n      hide: this.props.hide,\n      barSize: this.props.barSize\n    }, /*#__PURE__*/React.createElement(ReportBar, null), /*#__PURE__*/React.createElement(SetLegendPayload, {\n      legendPayload: computeLegendPayloadFromBarData(this.props)\n    }), /*#__PURE__*/React.createElement(SetTooltipEntrySettings, {\n      fn: getTooltipEntrySettings,\n      args: this.props\n    }), /*#__PURE__*/React.createElement(BarImpl, this.props));\n  }\n}\n_defineProperty(Bar, \"displayName\", 'Bar');\n_defineProperty(Bar, \"defaultProps\", defaultBarProps);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}