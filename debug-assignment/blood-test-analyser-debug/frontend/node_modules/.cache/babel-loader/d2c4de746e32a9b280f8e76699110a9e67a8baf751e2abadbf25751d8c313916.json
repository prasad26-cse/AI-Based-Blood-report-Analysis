{"ast":null,"code":"var _excluded = [\"sourceX\", \"sourceY\", \"sourceControlX\", \"targetX\", \"targetY\", \"targetControlX\", \"linkWidth\"],\n  _excluded2 = [\"width\", \"height\", \"className\", \"style\", \"children\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport * as React from 'react';\nimport { PureComponent } from 'react';\nimport maxBy from 'es-toolkit/compat/maxBy';\nimport sumBy from 'es-toolkit/compat/sumBy';\nimport get from 'es-toolkit/compat/get';\nimport { Surface } from '../container/Surface';\nimport { Layer } from '../container/Layer';\nimport { Rectangle } from '../shape/Rectangle';\nimport { shallowEqual } from '../util/ShallowEqual';\nimport { filterProps } from '../util/ReactUtils';\nimport { getValueByDataKey } from '../util/ChartUtils';\nimport { ReportChartMargin, ReportChartSize } from '../context/chartLayoutContext';\nimport { TooltipPortalContext } from '../context/tooltipPortalContext';\nimport { RechartsWrapper } from './RechartsWrapper';\nimport { RechartsStoreProvider } from '../state/RechartsStoreProvider';\nimport { useAppDispatch } from '../state/hooks';\nimport { mouseLeaveItem, setActiveClickItemIndex, setActiveMouseOverItemIndex } from '../state/tooltipSlice';\nimport { SetTooltipEntrySettings } from '../state/SetTooltipEntrySettings';\nimport { SetComputedData } from '../context/chartDataContext';\nimport { isPositiveNumber } from '../util/isWellBehavedNumber';\nvar interpolationGenerator = (a, b) => {\n  var ka = +a;\n  var kb = b - ka;\n  return t => ka + kb * t;\n};\nvar centerY = node => node.y + node.dy / 2;\nvar getValue = entry => entry && entry.value || 0;\nvar getSumOfIds = (links, ids) => ids.reduce((result, id) => result + getValue(links[id]), 0);\nvar getSumWithWeightedSource = (tree, links, ids) => ids.reduce((result, id) => {\n  var link = links[id];\n  var sourceNode = tree[link.source];\n  return result + centerY(sourceNode) * getValue(links[id]);\n}, 0);\nvar getSumWithWeightedTarget = (tree, links, ids) => ids.reduce((result, id) => {\n  var link = links[id];\n  var targetNode = tree[link.target];\n  return result + centerY(targetNode) * getValue(links[id]);\n}, 0);\nvar ascendingY = (a, b) => a.y - b.y;\nvar searchTargetsAndSources = (links, id) => {\n  var sourceNodes = [];\n  var sourceLinks = [];\n  var targetNodes = [];\n  var targetLinks = [];\n  for (var i = 0, len = links.length; i < len; i++) {\n    var link = links[i];\n    if (link.source === id) {\n      targetNodes.push(link.target);\n      targetLinks.push(i);\n    }\n    if (link.target === id) {\n      sourceNodes.push(link.source);\n      sourceLinks.push(i);\n    }\n  }\n  return {\n    sourceNodes,\n    sourceLinks,\n    targetLinks,\n    targetNodes\n  };\n};\nvar updateDepthOfTargets = (tree, curNode) => {\n  var {\n    targetNodes\n  } = curNode;\n  for (var i = 0, len = targetNodes.length; i < len; i++) {\n    var target = tree[targetNodes[i]];\n    if (target) {\n      target.depth = Math.max(curNode.depth + 1, target.depth);\n      updateDepthOfTargets(tree, target);\n    }\n  }\n};\nvar getNodesTree = (_ref, width, nodeWidth) => {\n  var {\n    nodes,\n    links\n  } = _ref;\n  var tree = nodes.map((entry, index) => {\n    var result = searchTargetsAndSources(links, index);\n    return _objectSpread(_objectSpread(_objectSpread({}, entry), result), {}, {\n      value: Math.max(getSumOfIds(links, result.sourceLinks), getSumOfIds(links, result.targetLinks)),\n      depth: 0\n    });\n  });\n  for (var i = 0, len = tree.length; i < len; i++) {\n    var node = tree[i];\n    if (!node.sourceNodes.length) {\n      updateDepthOfTargets(tree, node);\n    }\n  }\n  var maxDepth = maxBy(tree, entry => entry.depth).depth;\n  if (maxDepth >= 1) {\n    var childWidth = (width - nodeWidth) / maxDepth;\n    for (var _i = 0, _len = tree.length; _i < _len; _i++) {\n      var _node = tree[_i];\n      if (!_node.targetNodes.length) {\n        _node.depth = maxDepth;\n      }\n      _node.x = _node.depth * childWidth;\n      _node.dx = nodeWidth;\n    }\n  }\n  return {\n    tree,\n    maxDepth\n  };\n};\nvar getDepthTree = tree => {\n  var result = [];\n  for (var i = 0, len = tree.length; i < len; i++) {\n    var node = tree[i];\n    if (!result[node.depth]) {\n      result[node.depth] = [];\n    }\n    result[node.depth].push(node);\n  }\n  return result;\n};\nvar updateYOfTree = (depthTree, height, nodePadding, links) => {\n  var yRatio = Math.min(...depthTree.map(nodes => (height - (nodes.length - 1) * nodePadding) / sumBy(nodes, getValue)));\n  for (var d = 0, maxDepth = depthTree.length; d < maxDepth; d++) {\n    for (var i = 0, len = depthTree[d].length; i < len; i++) {\n      var node = depthTree[d][i];\n      node.y = i;\n      node.dy = node.value * yRatio;\n    }\n  }\n  return links.map(link => _objectSpread(_objectSpread({}, link), {}, {\n    dy: getValue(link) * yRatio\n  }));\n};\nvar resolveCollisions = function resolveCollisions(depthTree, height, nodePadding) {\n  var sort = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  for (var i = 0, len = depthTree.length; i < len; i++) {\n    var nodes = depthTree[i];\n    var n = nodes.length;\n\n    // Sort by the value of y\n    if (sort) {\n      nodes.sort(ascendingY);\n    }\n    var y0 = 0;\n    for (var j = 0; j < n; j++) {\n      var node = nodes[j];\n      var dy = y0 - node.y;\n      if (dy > 0) {\n        node.y += dy;\n      }\n      y0 = node.y + node.dy + nodePadding;\n    }\n    y0 = height + nodePadding;\n    for (var _j = n - 1; _j >= 0; _j--) {\n      var _node2 = nodes[_j];\n      var _dy = _node2.y + _node2.dy + nodePadding - y0;\n      if (_dy > 0) {\n        _node2.y -= _dy;\n        y0 = _node2.y;\n      } else {\n        break;\n      }\n    }\n  }\n};\nvar relaxLeftToRight = (tree, depthTree, links, alpha) => {\n  for (var i = 0, maxDepth = depthTree.length; i < maxDepth; i++) {\n    var nodes = depthTree[i];\n    for (var j = 0, len = nodes.length; j < len; j++) {\n      var node = nodes[j];\n      if (node.sourceLinks.length) {\n        var sourceSum = getSumOfIds(links, node.sourceLinks);\n        var weightedSum = getSumWithWeightedSource(tree, links, node.sourceLinks);\n        var y = weightedSum / sourceSum;\n        node.y += (y - centerY(node)) * alpha;\n      }\n    }\n  }\n};\nvar relaxRightToLeft = (tree, depthTree, links, alpha) => {\n  for (var i = depthTree.length - 1; i >= 0; i--) {\n    var nodes = depthTree[i];\n    for (var j = 0, len = nodes.length; j < len; j++) {\n      var node = nodes[j];\n      if (node.targetLinks.length) {\n        var targetSum = getSumOfIds(links, node.targetLinks);\n        var weightedSum = getSumWithWeightedTarget(tree, links, node.targetLinks);\n        var y = weightedSum / targetSum;\n        node.y += (y - centerY(node)) * alpha;\n      }\n    }\n  }\n};\nvar updateYOfLinks = (tree, links) => {\n  for (var i = 0, len = tree.length; i < len; i++) {\n    var node = tree[i];\n    var sy = 0;\n    var ty = 0;\n    node.targetLinks.sort((a, b) => tree[links[a].target].y - tree[links[b].target].y);\n    node.sourceLinks.sort((a, b) => tree[links[a].source].y - tree[links[b].source].y);\n    for (var j = 0, tLen = node.targetLinks.length; j < tLen; j++) {\n      var link = links[node.targetLinks[j]];\n      if (link) {\n        link.sy = sy;\n        sy += link.dy;\n      }\n    }\n    for (var _j2 = 0, sLen = node.sourceLinks.length; _j2 < sLen; _j2++) {\n      var _link = links[node.sourceLinks[_j2]];\n      if (_link) {\n        _link.ty = ty;\n        ty += _link.dy;\n      }\n    }\n  }\n};\nvar computeData = _ref2 => {\n  var {\n    data,\n    width,\n    height,\n    iterations,\n    nodeWidth,\n    nodePadding,\n    sort\n  } = _ref2;\n  var {\n    links\n  } = data;\n  var {\n    tree\n  } = getNodesTree(data, width, nodeWidth);\n  var depthTree = getDepthTree(tree);\n  var newLinks = updateYOfTree(depthTree, height, nodePadding, links);\n  resolveCollisions(depthTree, height, nodePadding, sort);\n  var alpha = 1;\n  for (var i = 1; i <= iterations; i++) {\n    relaxRightToLeft(tree, depthTree, newLinks, alpha *= 0.99);\n    resolveCollisions(depthTree, height, nodePadding, sort);\n    relaxLeftToRight(tree, depthTree, newLinks, alpha);\n    resolveCollisions(depthTree, height, nodePadding, sort);\n  }\n  updateYOfLinks(tree, newLinks);\n  return {\n    nodes: tree,\n    links: newLinks\n  };\n};\nvar getCoordinateOfTooltip = (item, type) => {\n  if (type === 'node') {\n    return {\n      x: +item.x + +item.width / 2,\n      y: +item.y + +item.height / 2\n    };\n  }\n  return 'sourceX' in item && {\n    x: (item.sourceX + item.targetX) / 2,\n    y: (item.sourceY + item.targetY) / 2\n  };\n};\nvar getPayloadOfTooltip = (item, type, nameKey) => {\n  var {\n    payload\n  } = item;\n  if (type === 'node') {\n    return {\n      payload,\n      name: getValueByDataKey(payload, nameKey, ''),\n      value: getValueByDataKey(payload, 'value')\n    };\n  }\n  if ('source' in payload && payload.source && payload.target) {\n    var sourceName = getValueByDataKey(payload.source, nameKey, '');\n    var targetName = getValueByDataKey(payload.target, nameKey, '');\n    return {\n      payload,\n      name: \"\".concat(sourceName, \" - \").concat(targetName),\n      value: getValueByDataKey(payload, 'value')\n    };\n  }\n  return null;\n};\nexport var sankeyPayloadSearcher = (_, activeIndex, computedData, nameKey) => {\n  if (activeIndex == null || typeof activeIndex !== 'string') {\n    return undefined;\n  }\n  var splitIndex = activeIndex.split('-');\n  var [targetType, index] = splitIndex;\n  var item = get(computedData, \"\".concat(targetType, \"s[\").concat(index, \"]\"));\n  if (item) {\n    var payload = getPayloadOfTooltip(item, targetType, nameKey);\n    return payload;\n  }\n  return undefined;\n};\nvar options = {\n  chartName: 'Sankey',\n  defaultTooltipEventType: 'item',\n  validateTooltipEventTypes: ['item'],\n  tooltipPayloadSearcher: sankeyPayloadSearcher,\n  eventEmitter: undefined\n};\nfunction getTooltipEntrySettings(props) {\n  var {\n    dataKey,\n    nameKey,\n    stroke,\n    strokeWidth,\n    fill,\n    name,\n    data\n  } = props;\n  return {\n    dataDefinedOnItem: data,\n    positions: undefined,\n    settings: {\n      stroke,\n      strokeWidth,\n      fill,\n      dataKey,\n      name,\n      nameKey,\n      color: fill,\n      unit: '' // Sankey does not have unit, why?\n    }\n  };\n}\n\n// TODO: improve types - NodeOptions uses SankeyNode, LinkOptions uses LinkProps. Standardize.\n\n// Why is margin not a Sankey prop? No clue. Probably it should be\nvar defaultSankeyMargin = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n};\nfunction renderLinkItem(option, props) {\n  if (/*#__PURE__*/React.isValidElement(option)) {\n    return /*#__PURE__*/React.cloneElement(option, props);\n  }\n  if (typeof option === 'function') {\n    return option(props);\n  }\n  var {\n      sourceX,\n      sourceY,\n      sourceControlX,\n      targetX,\n      targetY,\n      targetControlX,\n      linkWidth\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  return /*#__PURE__*/React.createElement(\"path\", _extends({\n    className: \"recharts-sankey-link\",\n    d: \"\\n          M\".concat(sourceX, \",\").concat(sourceY, \"\\n          C\").concat(sourceControlX, \",\").concat(sourceY, \" \").concat(targetControlX, \",\").concat(targetY, \" \").concat(targetX, \",\").concat(targetY, \"\\n        \"),\n    fill: \"none\",\n    stroke: \"#333\",\n    strokeWidth: linkWidth,\n    strokeOpacity: \"0.2\"\n  }, filterProps(others, false)));\n}\nvar buildLinkProps = _ref3 => {\n  var {\n    link,\n    nodes,\n    left,\n    top,\n    i,\n    linkContent,\n    linkCurvature\n  } = _ref3;\n  var {\n    sy: sourceRelativeY,\n    ty: targetRelativeY,\n    dy: linkWidth\n  } = link;\n  var sourceNode = nodes[link.source];\n  var targetNode = nodes[link.target];\n  var sourceX = sourceNode.x + sourceNode.dx + left;\n  var targetX = targetNode.x + left;\n  var interpolationFunc = interpolationGenerator(sourceX, targetX);\n  var sourceControlX = interpolationFunc(linkCurvature);\n  var targetControlX = interpolationFunc(1 - linkCurvature);\n  var sourceY = sourceNode.y + sourceRelativeY + linkWidth / 2 + top;\n  var targetY = targetNode.y + targetRelativeY + linkWidth / 2 + top;\n  var linkProps = _objectSpread({\n    sourceX,\n    targetX,\n    sourceY,\n    targetY,\n    sourceControlX,\n    targetControlX,\n    sourceRelativeY,\n    targetRelativeY,\n    linkWidth,\n    index: i,\n    payload: _objectSpread(_objectSpread({}, link), {}, {\n      source: sourceNode,\n      target: targetNode\n    })\n  }, filterProps(linkContent, false));\n  return linkProps;\n};\nfunction SankeyLinkElement(_ref4) {\n  var {\n    props,\n    i,\n    linkContent,\n    onMouseEnter: _onMouseEnter,\n    onMouseLeave: _onMouseLeave,\n    onClick: _onClick,\n    dataKey\n  } = _ref4;\n  var activeCoordinate = getCoordinateOfTooltip(props, 'link');\n  var activeIndex = \"link-\".concat(i);\n  var dispatch = useAppDispatch();\n  var events = {\n    onMouseEnter: e => {\n      dispatch(setActiveMouseOverItemIndex({\n        activeIndex,\n        activeDataKey: dataKey,\n        activeCoordinate\n      }));\n      _onMouseEnter(props, e);\n    },\n    onMouseLeave: e => {\n      dispatch(mouseLeaveItem());\n      _onMouseLeave(props, e);\n    },\n    onClick: e => {\n      dispatch(setActiveClickItemIndex({\n        activeIndex,\n        activeDataKey: dataKey,\n        activeCoordinate\n      }));\n      _onClick(props, e);\n    }\n  };\n  return /*#__PURE__*/React.createElement(Layer, events, renderLinkItem(linkContent, props));\n}\nfunction AllSankeyLinkElements(_ref5) {\n  var {\n    modifiedLinks,\n    links,\n    linkContent,\n    onMouseEnter,\n    onMouseLeave,\n    onClick,\n    dataKey\n  } = _ref5;\n  return /*#__PURE__*/React.createElement(Layer, {\n    className: \"recharts-sankey-links\",\n    key: \"recharts-sankey-links\"\n  }, links.map((link, i) => {\n    var linkProps = modifiedLinks[i];\n    return /*#__PURE__*/React.createElement(SankeyLinkElement, {\n      key: \"link-\".concat(link.source, \"-\").concat(link.target, \"-\").concat(link.value),\n      props: linkProps,\n      linkContent: linkContent,\n      i: i,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick,\n      dataKey: dataKey\n    });\n  }));\n}\nfunction renderNodeItem(option, props) {\n  if (/*#__PURE__*/React.isValidElement(option)) {\n    return /*#__PURE__*/React.cloneElement(option, props);\n  }\n  if (typeof option === 'function') {\n    return option(props);\n  }\n  return /*#__PURE__*/React.createElement(Rectangle, _extends({\n    className: \"recharts-sankey-node\",\n    fill: \"#0088fe\",\n    fillOpacity: \"0.8\"\n  }, filterProps(props, false)));\n}\nvar buildNodeProps = _ref6 => {\n  var {\n    node,\n    nodeContent,\n    top,\n    left,\n    i\n  } = _ref6;\n  var {\n    x,\n    y,\n    dx,\n    dy\n  } = node;\n  var nodeProps = _objectSpread(_objectSpread({}, filterProps(nodeContent, false)), {}, {\n    x: x + left,\n    y: y + top,\n    width: dx,\n    height: dy,\n    index: i,\n    payload: node\n  });\n  return nodeProps;\n};\nfunction NodeElement(_ref7) {\n  var {\n    props,\n    nodeContent,\n    i,\n    onMouseEnter: _onMouseEnter2,\n    onMouseLeave: _onMouseLeave2,\n    onClick: _onClick2,\n    dataKey\n  } = _ref7;\n  var dispatch = useAppDispatch();\n  var activeCoordinate = getCoordinateOfTooltip(props, 'node');\n  var activeIndex = \"node-\".concat(i);\n  var events = {\n    onMouseEnter: e => {\n      dispatch(setActiveMouseOverItemIndex({\n        activeIndex,\n        activeDataKey: dataKey,\n        activeCoordinate\n      }));\n      _onMouseEnter2(props, e);\n    },\n    onMouseLeave: e => {\n      dispatch(mouseLeaveItem());\n      _onMouseLeave2(props, e);\n    },\n    onClick: e => {\n      dispatch(setActiveClickItemIndex({\n        activeIndex,\n        activeDataKey: dataKey,\n        activeCoordinate\n      }));\n      _onClick2(props, e);\n    }\n  };\n  return /*#__PURE__*/React.createElement(Layer, events, renderNodeItem(nodeContent, props));\n}\nfunction AllNodeElements(_ref8) {\n  var {\n    modifiedNodes,\n    nodeContent,\n    onMouseEnter,\n    onMouseLeave,\n    onClick,\n    dataKey\n  } = _ref8;\n  return /*#__PURE__*/React.createElement(Layer, {\n    className: \"recharts-sankey-nodes\",\n    key: \"recharts-sankey-nodes\"\n  }, modifiedNodes.map((modifiedNode, i) => {\n    return /*#__PURE__*/React.createElement(NodeElement, {\n      props: modifiedNode,\n      nodeContent: nodeContent,\n      i: i,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick,\n      dataKey: dataKey\n    });\n  }));\n}\nexport class Sankey extends PureComponent {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", {\n      nodes: [],\n      links: [],\n      modifiedLinks: [],\n      modifiedNodes: []\n    });\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    var {\n      data,\n      width,\n      height,\n      margin,\n      iterations,\n      nodeWidth,\n      nodePadding,\n      sort,\n      linkCurvature\n    } = nextProps;\n    if (data !== prevState.prevData || width !== prevState.prevWidth || height !== prevState.prevHeight || !shallowEqual(margin, prevState.prevMargin) || iterations !== prevState.prevIterations || nodeWidth !== prevState.prevNodeWidth || nodePadding !== prevState.prevNodePadding || sort !== prevState.sort) {\n      var contentWidth = width - (margin && margin.left || 0) - (margin && margin.right || 0);\n      var contentHeight = height - (margin && margin.top || 0) - (margin && margin.bottom || 0);\n      var {\n        links,\n        nodes\n      } = computeData({\n        data,\n        width: contentWidth,\n        height: contentHeight,\n        iterations,\n        nodeWidth,\n        nodePadding,\n        sort\n      });\n      var top = get(margin, 'top') || 0;\n      var left = get(margin, 'left') || 0;\n      var modifiedLinks = links.map((link, i) => {\n        return buildLinkProps({\n          link,\n          nodes,\n          i,\n          top,\n          left,\n          linkContent: nextProps.link,\n          linkCurvature\n        });\n      });\n      var modifiedNodes = nodes.map((node, i) => {\n        return buildNodeProps({\n          node,\n          nodeContent: nextProps.node,\n          i,\n          top,\n          left\n        });\n      });\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        nodes,\n        links,\n        modifiedLinks,\n        modifiedNodes,\n        prevData: data,\n        prevWidth: iterations,\n        prevHeight: height,\n        prevMargin: margin,\n        prevNodePadding: nodePadding,\n        prevNodeWidth: nodeWidth,\n        prevIterations: iterations,\n        prevSort: sort\n      });\n    }\n    return null;\n  }\n  handleMouseEnter(item, type, e) {\n    var {\n      onMouseEnter\n    } = this.props;\n    if (onMouseEnter) {\n      onMouseEnter(item, type, e);\n    }\n  }\n  handleMouseLeave(item, type, e) {\n    var {\n      onMouseLeave\n    } = this.props;\n    if (onMouseLeave) {\n      onMouseLeave(item, type, e);\n    }\n  }\n  handleClick(item, type, e) {\n    var {\n      onClick\n    } = this.props;\n    if (onClick) onClick(item, type, e);\n  }\n  render() {\n    var _this$props = this.props,\n      {\n        width,\n        height,\n        className,\n        style,\n        children\n      } = _this$props,\n      others = _objectWithoutProperties(_this$props, _excluded2);\n    if (!isPositiveNumber(width) || !isPositiveNumber(height)) {\n      return null;\n    }\n    var {\n      links,\n      modifiedNodes,\n      modifiedLinks\n    } = this.state;\n    var attrs = filterProps(others, false);\n    return /*#__PURE__*/React.createElement(RechartsStoreProvider, {\n      preloadedState: {\n        options\n      },\n      reduxStoreName: className !== null && className !== void 0 ? className : 'Sankey'\n    }, /*#__PURE__*/React.createElement(SetTooltipEntrySettings, {\n      fn: getTooltipEntrySettings,\n      args: this.props\n    }), /*#__PURE__*/React.createElement(SetComputedData, {\n      computedData: {\n        links: modifiedLinks,\n        nodes: modifiedNodes\n      }\n    }), /*#__PURE__*/React.createElement(ReportChartSize, {\n      width: width,\n      height: height\n    }), /*#__PURE__*/React.createElement(ReportChartMargin, {\n      margin: defaultSankeyMargin\n    }), /*#__PURE__*/React.createElement(TooltipPortalContext.Provider, {\n      value: this.state.tooltipPortal\n    }, /*#__PURE__*/React.createElement(RechartsWrapper, {\n      className: className,\n      style: style,\n      width: width,\n      height: height,\n      ref: node => {\n        if (this.state.tooltipPortal == null) {\n          this.setState({\n            tooltipPortal: node\n          });\n        }\n      },\n      onMouseEnter: undefined,\n      onMouseLeave: undefined,\n      onClick: undefined,\n      onMouseMove: undefined,\n      onMouseDown: undefined,\n      onMouseUp: undefined,\n      onContextMenu: undefined,\n      onDoubleClick: undefined,\n      onTouchStart: undefined,\n      onTouchMove: undefined,\n      onTouchEnd: undefined\n    }, /*#__PURE__*/React.createElement(Surface, _extends({}, attrs, {\n      width: width,\n      height: height\n    }), children, /*#__PURE__*/React.createElement(AllSankeyLinkElements, {\n      links: links,\n      modifiedLinks: modifiedLinks,\n      linkContent: this.props.link,\n      dataKey: this.props.dataKey,\n      onMouseEnter: (linkProps, e) => this.handleMouseEnter(linkProps, 'link', e),\n      onMouseLeave: (linkProps, e) => this.handleMouseLeave(linkProps, 'link', e),\n      onClick: (linkProps, e) => this.handleClick(linkProps, 'link', e)\n    }), /*#__PURE__*/React.createElement(AllNodeElements, {\n      modifiedNodes: modifiedNodes,\n      nodeContent: this.props.node,\n      dataKey: this.props.dataKey,\n      onMouseEnter: (nodeProps, e) => this.handleMouseEnter(nodeProps, 'node', e),\n      onMouseLeave: (nodeProps, e) => this.handleMouseLeave(nodeProps, 'node', e),\n      onClick: (nodeProps, e) => this.handleClick(nodeProps, 'node', e)\n    })))));\n  }\n}\n_defineProperty(Sankey, \"displayName\", 'Sankey');\n_defineProperty(Sankey, \"defaultProps\", {\n  nameKey: 'name',\n  dataKey: 'value',\n  nodePadding: 10,\n  nodeWidth: 10,\n  linkCurvature: 0.5,\n  iterations: 32,\n  margin: {\n    top: 5,\n    right: 5,\n    bottom: 5,\n    left: 5\n  },\n  sort: true\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}