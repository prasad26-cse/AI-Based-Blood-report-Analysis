{"ast":null,"code":"var _excluded = [\"cx\", \"cy\", \"angle\", \"axisLine\"],\n  _excluded2 = [\"angle\", \"tickFormatter\", \"stroke\", \"tick\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nimport * as React from 'react';\nimport { PureComponent, useEffect } from 'react';\nimport maxBy from 'es-toolkit/compat/maxBy';\nimport minBy from 'es-toolkit/compat/minBy';\nimport { clsx } from 'clsx';\nimport { Text } from '../component/Text';\nimport { Label } from '../component/Label';\nimport { Layer } from '../container/Layer';\nimport { getTickClassName, polarToCartesian } from '../util/PolarUtils';\nimport { adaptEventsOfChild } from '../util/types';\nimport { filterProps } from '../util/ReactUtils';\nimport { addRadiusAxis, removeRadiusAxis } from '../state/polarAxisSlice';\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\nimport { selectPolarAxisScale, selectPolarAxisTicks } from '../state/selectors/polarScaleSelectors';\nimport { selectPolarViewBox } from '../state/selectors/polarAxisSelectors';\nimport { defaultPolarRadiusAxisProps } from './defaultPolarRadiusAxisProps';\nvar AXIS_TYPE = 'radiusAxis';\nfunction SetRadiusAxisSettings(settings) {\n  var dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(addRadiusAxis(settings));\n    return () => {\n      dispatch(removeRadiusAxis(settings));\n    };\n  });\n  return null;\n}\n\n/**\n * Calculate the coordinate of tick\n * @param coordinate The radius of tick\n * @param angle from props\n * @param cx from chart\n * @param cy from chart\n * @return (x, y)\n */\nvar getTickValueCoord = (_ref, angle, cx, cy) => {\n  var {\n    coordinate\n  } = _ref;\n  return polarToCartesian(cx, cy, coordinate, angle);\n};\nvar getTickTextAnchor = orientation => {\n  var textAnchor;\n  switch (orientation) {\n    case 'left':\n      textAnchor = 'end';\n      break;\n    case 'right':\n      textAnchor = 'start';\n      break;\n    default:\n      textAnchor = 'middle';\n      break;\n  }\n  return textAnchor;\n};\nvar getViewBox = (angle, cx, cy, ticks) => {\n  var maxRadiusTick = maxBy(ticks, entry => entry.coordinate || 0);\n  var minRadiusTick = minBy(ticks, entry => entry.coordinate || 0);\n  return {\n    cx,\n    cy,\n    startAngle: angle,\n    endAngle: angle,\n    innerRadius: minRadiusTick.coordinate || 0,\n    outerRadius: maxRadiusTick.coordinate || 0\n  };\n};\nvar renderAxisLine = (props, ticks) => {\n  var {\n      cx,\n      cy,\n      angle,\n      axisLine\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  var extent = ticks.reduce((result, entry) => [Math.min(result[0], entry.coordinate), Math.max(result[1], entry.coordinate)], [Infinity, -Infinity]);\n  var point0 = polarToCartesian(cx, cy, extent[0], angle);\n  var point1 = polarToCartesian(cx, cy, extent[1], angle);\n  var axisLineProps = _objectSpread(_objectSpread(_objectSpread({}, filterProps(others, false)), {}, {\n    fill: 'none'\n  }, filterProps(axisLine, false)), {}, {\n    x1: point0.x,\n    y1: point0.y,\n    x2: point1.x,\n    y2: point1.y\n  });\n  return /*#__PURE__*/React.createElement(\"line\", _extends({\n    className: \"recharts-polar-radius-axis-line\"\n  }, axisLineProps));\n};\nvar renderTickItem = (option, tickProps, value) => {\n  var tickItem;\n  if (/*#__PURE__*/React.isValidElement(option)) {\n    tickItem = /*#__PURE__*/React.cloneElement(option, tickProps);\n  } else if (typeof option === 'function') {\n    tickItem = option(tickProps);\n  } else {\n    tickItem = /*#__PURE__*/React.createElement(Text, _extends({}, tickProps, {\n      className: \"recharts-polar-radius-axis-tick-value\"\n    }), value);\n  }\n  return tickItem;\n};\nvar renderTicks = (props, ticks) => {\n  var {\n      angle,\n      tickFormatter,\n      stroke,\n      tick\n    } = props,\n    others = _objectWithoutProperties(props, _excluded2);\n  var textAnchor = getTickTextAnchor(props.orientation);\n  var axisProps = filterProps(others, false);\n  var customTickProps = filterProps(tick, false);\n  var items = ticks.map((entry, i) => {\n    var coord = getTickValueCoord(entry, props.angle, props.cx, props.cy);\n    var tickProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n      textAnchor,\n      transform: \"rotate(\".concat(90 - angle, \", \").concat(coord.x, \", \").concat(coord.y, \")\")\n    }, axisProps), {}, {\n      stroke: 'none',\n      fill: stroke\n    }, customTickProps), {}, {\n      index: i\n    }, coord), {}, {\n      payload: entry\n    });\n    return /*#__PURE__*/React.createElement(Layer, _extends({\n      className: clsx('recharts-polar-radius-axis-tick', getTickClassName(tick)),\n      key: \"tick-\".concat(entry.coordinate)\n    }, adaptEventsOfChild(props, entry, i)), renderTickItem(tick, tickProps, tickFormatter ? tickFormatter(entry.value, i) : entry.value));\n  });\n  return /*#__PURE__*/React.createElement(Layer, {\n    className: \"recharts-polar-radius-axis-ticks\"\n  }, items);\n};\nexport var PolarRadiusAxisWrapper = defaultsAndInputs => {\n  var {\n    radiusAxisId\n  } = defaultsAndInputs;\n  var viewBox = useAppSelector(selectPolarViewBox);\n  var scale = useAppSelector(state => selectPolarAxisScale(state, 'radiusAxis', radiusAxisId));\n  var ticks = useAppSelector(state => selectPolarAxisTicks(state, 'radiusAxis', radiusAxisId, false));\n  if (viewBox == null || !ticks || !ticks.length) {\n    return null;\n  }\n  var props = _objectSpread(_objectSpread(_objectSpread({}, defaultsAndInputs), {}, {\n    scale\n  }, viewBox), {}, {\n    radius: viewBox.outerRadius\n  });\n  var {\n    tick,\n    axisLine\n  } = props;\n  return /*#__PURE__*/React.createElement(Layer, {\n    className: clsx('recharts-polar-radius-axis', AXIS_TYPE, props.className)\n  }, axisLine && renderAxisLine(props, ticks), tick && renderTicks(props, ticks), Label.renderCallByParent(props, getViewBox(props.angle, props.cx, props.cy, ticks)));\n};\nexport class PolarRadiusAxis extends PureComponent {\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SetRadiusAxisSettings, {\n      domain: this.props.domain,\n      id: this.props.radiusAxisId,\n      scale: this.props.scale,\n      type: this.props.type,\n      dataKey: this.props.dataKey,\n      unit: undefined,\n      name: this.props.name,\n      allowDuplicatedCategory: this.props.allowDuplicatedCategory,\n      allowDataOverflow: this.props.allowDataOverflow,\n      reversed: this.props.reversed,\n      includeHidden: this.props.includeHidden,\n      allowDecimals: this.props.allowDecimals,\n      tickCount: this.props.tickCount\n      // @ts-expect-error the type does not match. Is RadiusAxis really expecting what it says?\n      ,\n\n      ticks: this.props.ticks,\n      tick: this.props.tick\n    }), /*#__PURE__*/React.createElement(PolarRadiusAxisWrapper, this.props));\n  }\n}\n_defineProperty(PolarRadiusAxis, \"displayName\", 'PolarRadiusAxis');\n_defineProperty(PolarRadiusAxis, \"axisType\", AXIS_TYPE);\n_defineProperty(PolarRadiusAxis, \"defaultProps\", defaultPolarRadiusAxisProps);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}