{"ast":null,"code":"import { createAction, createListenerMiddleware } from '@reduxjs/toolkit';\nimport { mouseLeaveChart, setMouseClickAxisIndex, setMouseOverAxisIndex } from './tooltipSlice';\nimport { selectActivePropsFromChartPointer } from './selectors/selectActivePropsFromChartPointer';\nimport { selectTooltipEventType } from './selectors/selectTooltipEventType';\nimport { getChartPointer } from '../util/getChartPointer';\nexport var mouseClickAction = createAction('mouseClick');\nexport var mouseClickMiddleware = createListenerMiddleware();\n\n// TODO: there's a bug here when you click the chart the activeIndex resets to zero\nmouseClickMiddleware.startListening({\n  actionCreator: mouseClickAction,\n  effect: (action, listenerApi) => {\n    var mousePointer = action.payload;\n    var activeProps = selectActivePropsFromChartPointer(listenerApi.getState(), getChartPointer(mousePointer));\n    if ((activeProps === null || activeProps === void 0 ? void 0 : activeProps.activeIndex) != null) {\n      listenerApi.dispatch(setMouseClickAxisIndex({\n        activeIndex: activeProps.activeIndex,\n        activeDataKey: undefined,\n        activeCoordinate: activeProps.activeCoordinate\n      }));\n    }\n  }\n});\nexport var mouseMoveAction = createAction('mouseMove');\nexport var mouseMoveMiddleware = createListenerMiddleware();\nmouseMoveMiddleware.startListening({\n  actionCreator: mouseMoveAction,\n  effect: (action, listenerApi) => {\n    var mousePointer = action.payload;\n    var state = listenerApi.getState();\n    var tooltipEventType = selectTooltipEventType(state, state.tooltip.settings.shared);\n    var activeProps = selectActivePropsFromChartPointer(state, getChartPointer(mousePointer));\n\n    // this functionality only applies to charts that have axes\n    if (tooltipEventType === 'axis') {\n      if ((activeProps === null || activeProps === void 0 ? void 0 : activeProps.activeIndex) != null) {\n        listenerApi.dispatch(setMouseOverAxisIndex({\n          activeIndex: activeProps.activeIndex,\n          activeDataKey: undefined,\n          activeCoordinate: activeProps.activeCoordinate\n        }));\n      } else {\n        // this is needed to clear tooltip state when the mouse moves out of the inRange (svg - offset) function, but not yet out of the svg\n        listenerApi.dispatch(mouseLeaveChart());\n      }\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}