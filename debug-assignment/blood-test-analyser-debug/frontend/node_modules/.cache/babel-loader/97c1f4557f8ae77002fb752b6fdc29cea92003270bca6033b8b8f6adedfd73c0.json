{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, Symbol.toStringTag, {\n  value: 'Module'\n});\nconst compareValues = require('../_internal/compareValues.js');\nconst isKey = require('../_internal/isKey.js');\nconst toPath = require('../util/toPath.js');\nfunction orderBy(collection, criteria, orders, guard) {\n  if (collection == null) {\n    return [];\n  }\n  orders = guard ? undefined : orders;\n  if (!Array.isArray(collection)) {\n    collection = Object.values(collection);\n  }\n  if (!Array.isArray(criteria)) {\n    criteria = criteria == null ? [null] : [criteria];\n  }\n  if (criteria.length === 0) {\n    criteria = [null];\n  }\n  if (!Array.isArray(orders)) {\n    orders = orders == null ? [] : [orders];\n  }\n  orders = orders.map(order => String(order));\n  const getValueByNestedPath = (object, path) => {\n    let target = object;\n    for (let i = 0; i < path.length && target != null; ++i) {\n      target = target[path[i]];\n    }\n    return target;\n  };\n  const getValueByCriterion = (criterion, object) => {\n    if (object == null || criterion == null) {\n      return object;\n    }\n    if (typeof criterion === 'object' && 'key' in criterion) {\n      if (Object.hasOwn(object, criterion.key)) {\n        return object[criterion.key];\n      }\n      return getValueByNestedPath(object, criterion.path);\n    }\n    if (typeof criterion === 'function') {\n      return criterion(object);\n    }\n    if (Array.isArray(criterion)) {\n      return getValueByNestedPath(object, criterion);\n    }\n    if (typeof object === 'object') {\n      return object[criterion];\n    }\n    return object;\n  };\n  const preparedCriteria = criteria.map(criterion => {\n    if (Array.isArray(criterion) && criterion.length === 1) {\n      criterion = criterion[0];\n    }\n    if (criterion == null || typeof criterion === 'function' || Array.isArray(criterion) || isKey.isKey(criterion)) {\n      return criterion;\n    }\n    return {\n      key: criterion,\n      path: toPath.toPath(criterion)\n    };\n  });\n  const preparedCollection = collection.map(item => ({\n    original: item,\n    criteria: preparedCriteria.map(criterion => getValueByCriterion(criterion, item))\n  }));\n  return preparedCollection.slice().sort((a, b) => {\n    for (let i = 0; i < preparedCriteria.length; i++) {\n      const comparedResult = compareValues.compareValues(a.criteria[i], b.criteria[i], orders[i]);\n      if (comparedResult !== 0) {\n        return comparedResult;\n      }\n    }\n    return 0;\n  }).map(item => item.original);\n}\nexports.orderBy = orderBy;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}