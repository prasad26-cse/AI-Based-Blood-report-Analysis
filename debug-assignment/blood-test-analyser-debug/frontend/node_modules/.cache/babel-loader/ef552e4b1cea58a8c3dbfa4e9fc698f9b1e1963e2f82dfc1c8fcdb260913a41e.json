{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport var rectWithPoints = (_ref, _ref2) => {\n  var {\n    x: x1,\n    y: y1\n  } = _ref;\n  var {\n    x: x2,\n    y: y2\n  } = _ref2;\n  return {\n    x: Math.min(x1, x2),\n    y: Math.min(y1, y2),\n    width: Math.abs(x2 - x1),\n    height: Math.abs(y2 - y1)\n  };\n};\n\n/**\n * Compute the x, y, width, and height of a box from two reference points.\n * @param  {Object} coords     x1, x2, y1, and y2\n * @return {Object} object\n */\nexport var rectWithCoords = _ref3 => {\n  var {\n    x1,\n    y1,\n    x2,\n    y2\n  } = _ref3;\n  return rectWithPoints({\n    x: x1,\n    y: y1\n  }, {\n    x: x2,\n    y: y2\n  });\n};\nexport class ScaleHelper {\n  static create(obj) {\n    return new ScaleHelper(obj);\n  }\n  constructor(scale) {\n    this.scale = scale;\n  }\n  get domain() {\n    return this.scale.domain;\n  }\n  get range() {\n    return this.scale.range;\n  }\n  get rangeMin() {\n    return this.range()[0];\n  }\n  get rangeMax() {\n    return this.range()[1];\n  }\n  get bandwidth() {\n    return this.scale.bandwidth;\n  }\n  apply(value) {\n    var {\n      bandAware,\n      position\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (value === undefined) {\n      return undefined;\n    }\n    if (position) {\n      switch (position) {\n        case 'start':\n          {\n            return this.scale(value);\n          }\n        case 'middle':\n          {\n            var offset = this.bandwidth ? this.bandwidth() / 2 : 0;\n            return this.scale(value) + offset;\n          }\n        case 'end':\n          {\n            var _offset = this.bandwidth ? this.bandwidth() : 0;\n            return this.scale(value) + _offset;\n          }\n        default:\n          {\n            return this.scale(value);\n          }\n      }\n    }\n    if (bandAware) {\n      var _offset2 = this.bandwidth ? this.bandwidth() / 2 : 0;\n      return this.scale(value) + _offset2;\n    }\n    return this.scale(value);\n  }\n  isInRange(value) {\n    var range = this.range();\n    var first = range[0];\n    var last = range[range.length - 1];\n    return first <= last ? value >= first && value <= last : value >= last && value <= first;\n  }\n}\n_defineProperty(ScaleHelper, \"EPS\", 1e-4);\nexport var createLabeledScales = options => {\n  var scales = Object.keys(options).reduce((res, key) => _objectSpread(_objectSpread({}, res), {}, {\n    [key]: ScaleHelper.create(options[key])\n  }), {});\n  return _objectSpread(_objectSpread({}, scales), {}, {\n    apply(coord) {\n      var {\n        bandAware,\n        position\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return Object.fromEntries(Object.entries(coord).map(_ref4 => {\n        var [label, value] = _ref4;\n        return [label, scales[label].apply(value, {\n          bandAware,\n          position\n        })];\n      }));\n    },\n    isInRange(coord) {\n      return Object.keys(coord).every(label => scales[label].isInRange(coord[label]));\n    }\n  });\n};\n\n/** Normalizes the angle so that 0 <= angle < 180.\n * @param {number} angle Angle in degrees.\n * @return {number} the normalized angle with a value of at least 0 and never greater or equal to 180. */\nexport function normalizeAngle(angle) {\n  return (angle % 180 + 180) % 180;\n}\n\n/** Calculates the width of the largest horizontal line that fits inside a rectangle that is displayed at an angle.\n * @param {Object} size Width and height of the text in a horizontal position.\n * @param {number} angle Angle in degrees in which the text is displayed.\n * @return {number} The width of the largest horizontal line that fits inside a rectangle that is displayed at an angle.\n */\nexport var getAngledRectangleWidth = function getAngledRectangleWidth(_ref5) {\n  var {\n    width,\n    height\n  } = _ref5;\n  var angle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Ensure angle is >= 0 && < 180\n  var normalizedAngle = normalizeAngle(angle);\n  var angleRadians = normalizedAngle * Math.PI / 180;\n\n  /* Depending on the height and width of the rectangle, we may need to use different formulas to calculate the angled\n   * width. This threshold defines when each formula should kick in. */\n  var angleThreshold = Math.atan(height / width);\n  var angledWidth = angleRadians > angleThreshold && angleRadians < Math.PI - angleThreshold ? height / Math.sin(angleRadians) : width / Math.cos(angleRadians);\n  return Math.abs(angledWidth);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}