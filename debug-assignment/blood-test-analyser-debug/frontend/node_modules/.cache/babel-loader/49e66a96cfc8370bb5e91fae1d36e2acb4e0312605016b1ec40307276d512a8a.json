{"ast":null,"code":"var _excluded = [\"children\", \"begin\", \"duration\", \"attributeName\", \"easing\", \"isActive\", \"from\", \"to\", \"canBegin\", \"onAnimationEnd\", \"shouldReAnimate\", \"onAnimationReStart\", \"animationManager\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport * as React from 'react';\nimport { PureComponent, cloneElement, Children, createContext, useContext } from 'react';\nimport isEqual from 'es-toolkit/compat/isEqual';\nimport { createAnimateManager } from './AnimationManager';\nimport { configEasing } from './easing';\nimport configUpdate from './configUpdate';\nimport { getTransitionVal } from './util';\nimport { RequestAnimationFrameTimeoutController } from './timeoutController';\nfunction createDefaultAnimationManager() {\n  return createAnimateManager(new RequestAnimationFrameTimeoutController());\n}\nclass AnimateImpl extends PureComponent {\n  constructor(props, context) {\n    super(props, context);\n    _defineProperty(this, \"mounted\", false);\n    _defineProperty(this, \"manager\", null);\n    _defineProperty(this, \"stopJSAnimation\", null);\n    _defineProperty(this, \"unSubscribe\", null);\n    var {\n      isActive,\n      attributeName,\n      from,\n      to,\n      children,\n      duration,\n      animationManager\n    } = this.props;\n    this.manager = animationManager;\n    this.handleStyleChange = this.handleStyleChange.bind(this);\n    this.changeStyle = this.changeStyle.bind(this);\n    if (!isActive || duration <= 0) {\n      this.state = {\n        style: {}\n      };\n\n      // if children is a function and animation is not active, set style to 'to'\n      if (typeof children === 'function') {\n        this.state = {\n          style: to\n        };\n      }\n      return;\n    }\n    if (from) {\n      if (typeof children === 'function') {\n        this.state = {\n          style: from\n        };\n        return;\n      }\n      this.state = {\n        style: attributeName ? {\n          [attributeName]: from\n        } : from\n      };\n    } else {\n      this.state = {\n        style: {}\n      };\n    }\n  }\n  componentDidMount() {\n    var {\n      isActive,\n      canBegin\n    } = this.props;\n    this.mounted = true;\n    if (!isActive || !canBegin) {\n      return;\n    }\n    this.runAnimation(this.props);\n  }\n  componentDidUpdate(prevProps) {\n    var {\n      isActive,\n      canBegin,\n      attributeName,\n      shouldReAnimate,\n      to,\n      from: currentFrom\n    } = this.props;\n    var {\n      style\n    } = this.state;\n    if (!canBegin) {\n      return;\n    }\n    if (!isActive) {\n      var newState = {\n        style: attributeName ? {\n          [attributeName]: to\n        } : to\n      };\n      if (this.state && style) {\n        if (attributeName && style[attributeName] !== to || !attributeName && style !== to) {\n          this.setState(newState);\n        }\n      }\n      return;\n    }\n    if (isEqual(prevProps.to, to) && prevProps.canBegin && prevProps.isActive) {\n      return;\n    }\n    var isTriggered = !prevProps.canBegin || !prevProps.isActive;\n    this.manager.stop();\n    if (this.stopJSAnimation) {\n      this.stopJSAnimation();\n    }\n    var from = isTriggered || shouldReAnimate ? currentFrom : prevProps.to;\n    if (this.state && style) {\n      var _newState = {\n        style: attributeName ? {\n          [attributeName]: from\n        } : from\n      };\n      if (attributeName && style[attributeName] !== from || !attributeName && style !== from) {\n        this.setState(_newState);\n      }\n    }\n    this.runAnimation(_objectSpread(_objectSpread({}, this.props), {}, {\n      from,\n      begin: 0\n    }));\n  }\n  componentWillUnmount() {\n    this.mounted = false;\n    var {\n      onAnimationEnd\n    } = this.props;\n    if (this.unSubscribe) {\n      this.unSubscribe();\n    }\n    this.manager.stop();\n    if (this.stopJSAnimation) {\n      this.stopJSAnimation();\n    }\n    if (onAnimationEnd) {\n      onAnimationEnd();\n    }\n  }\n  handleStyleChange(style) {\n    this.changeStyle(style);\n  }\n  changeStyle(style) {\n    if (this.mounted) {\n      this.setState({\n        style\n      });\n    }\n  }\n  runJSAnimation(props) {\n    var {\n      from,\n      to,\n      duration,\n      easing,\n      begin,\n      onAnimationEnd,\n      onAnimationStart\n    } = props;\n    var startAnimation = configUpdate(from, to, configEasing(easing), duration, this.changeStyle, this.manager.getTimeoutController());\n    var finalStartAnimation = () => {\n      this.stopJSAnimation = startAnimation();\n    };\n    this.manager.start([onAnimationStart, begin, finalStartAnimation, duration, onAnimationEnd]);\n  }\n  runAnimation(props) {\n    var {\n      begin,\n      duration,\n      attributeName,\n      to: propsTo,\n      easing,\n      onAnimationStart,\n      onAnimationEnd,\n      children\n    } = props;\n    this.unSubscribe = this.manager.subscribe(this.handleStyleChange);\n    if (typeof easing === 'function' || typeof children === 'function' || easing === 'spring') {\n      this.runJSAnimation(props);\n      return;\n    }\n    var to = attributeName ? {\n      [attributeName]: propsTo\n    } : propsTo;\n    var transition = getTransitionVal(Object.keys(to), duration, easing);\n    this.manager.start([onAnimationStart, begin, _objectSpread(_objectSpread({}, to), {}, {\n      transition\n    }), duration, onAnimationEnd]);\n  }\n  render() {\n    var _this$props = this.props,\n      {\n        children,\n        begin,\n        duration,\n        attributeName,\n        easing,\n        isActive,\n        from,\n        to,\n        canBegin,\n        onAnimationEnd,\n        shouldReAnimate,\n        onAnimationReStart,\n        animationManager\n      } = _this$props,\n      others = _objectWithoutProperties(_this$props, _excluded);\n    var count = Children.count(children);\n    var stateStyle = this.state.style;\n    if (typeof children === 'function') {\n      return children(stateStyle);\n    }\n    if (!isActive || count === 0 || duration <= 0) {\n      return children;\n    }\n    var cloneContainer = container => {\n      var {\n        style = {},\n        className\n      } = container.props;\n      var res = /*#__PURE__*/cloneElement(container, _objectSpread(_objectSpread({}, others), {}, {\n        style: _objectSpread(_objectSpread({}, style), stateStyle),\n        className\n      }));\n      return res;\n    };\n    if (count === 1) {\n      // @ts-expect-error TODO - fix the type error\n      return cloneContainer(Children.only(children));\n    }\n\n    // @ts-expect-error TODO - fix the type error\n    return /*#__PURE__*/React.createElement(\"div\", null, Children.map(children, child => cloneContainer(child)));\n  }\n}\n_defineProperty(AnimateImpl, \"displayName\", 'Animate');\n_defineProperty(AnimateImpl, \"defaultProps\", {\n  begin: 0,\n  duration: 1000,\n  attributeName: '',\n  easing: 'ease',\n  isActive: true,\n  canBegin: true,\n  onAnimationEnd: () => {},\n  onAnimationStart: () => {}\n});\nexport var AnimationManagerContext = /*#__PURE__*/createContext(null);\nexport function Animate(props) {\n  var _ref, _props$animationManag;\n  var contextAnimationManager = useContext(AnimationManagerContext);\n  return /*#__PURE__*/React.createElement(AnimateImpl, _extends({}, props, {\n    animationManager: (_ref = (_props$animationManag = props.animationManager) !== null && _props$animationManag !== void 0 ? _props$animationManag : contextAnimationManager) !== null && _ref !== void 0 ? _ref : createDefaultAnimationManager()\n  }));\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}