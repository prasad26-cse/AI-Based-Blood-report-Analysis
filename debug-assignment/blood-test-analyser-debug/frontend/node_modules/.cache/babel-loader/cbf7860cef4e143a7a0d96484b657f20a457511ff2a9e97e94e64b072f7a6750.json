{"ast":null,"code":"var _excluded = [\"onMouseEnter\", \"onClick\", \"onMouseLeave\", \"shape\", \"activeShape\"],\n  _excluded2 = [\"stroke\", \"fill\", \"legendType\", \"hide\", \"isAnimationActive\", \"animationBegin\", \"animationDuration\", \"animationEasing\", \"nameKey\", \"lastShapeType\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\n/* eslint-disable max-classes-per-file */\nimport * as React from 'react';\nimport { PureComponent, useCallback, useMemo, useRef, useState } from 'react';\nimport omit from 'es-toolkit/compat/omit';\nimport { clsx } from 'clsx';\nimport { selectActiveIndex } from '../state/selectors/selectors';\nimport { useAppSelector } from '../state/hooks';\nimport { Layer } from '../container/Layer';\nimport { LabelList } from '../component/LabelList';\nimport { Global } from '../util/Global';\nimport { interpolateNumber, isNumber } from '../util/DataUtils';\nimport { getValueByDataKey } from '../util/ChartUtils';\nimport { adaptEventsOfChild } from '../util/types';\nimport { FunnelTrapezoid } from '../util/FunnelUtils';\nimport { useMouseClickItemDispatch, useMouseEnterItemDispatch, useMouseLeaveItemDispatch } from '../context/tooltipContext';\nimport { SetTooltipEntrySettings } from '../state/SetTooltipEntrySettings';\nimport { useOffset } from '../context/chartLayoutContext';\nimport { selectFunnelTrapezoids } from '../state/selectors/funnelSelectors';\nimport { filterProps, findAllByType } from '../util/ReactUtils';\nimport { Cell } from '../component/Cell';\nimport { resolveDefaultProps } from '../util/resolveDefaultProps';\nimport { Animate } from '../animation/Animate';\n\n/**\n * Internal props, combination of external props + defaultProps + private Recharts state\n */\n\n/**\n * External props, intended for end users to fill in\n */\n\nfunction getTooltipEntrySettings(props) {\n  var {\n    dataKey,\n    nameKey,\n    stroke,\n    strokeWidth,\n    fill,\n    name,\n    hide,\n    tooltipType,\n    data\n  } = props;\n  return {\n    dataDefinedOnItem: data,\n    positions: props.trapezoids.map(_ref => {\n      var {\n        tooltipPosition\n      } = _ref;\n      return tooltipPosition;\n    }),\n    settings: {\n      stroke,\n      strokeWidth,\n      fill,\n      dataKey,\n      name,\n      nameKey,\n      hide,\n      type: tooltipType,\n      color: fill,\n      unit: '' // Funnel does not have unit, why?\n    }\n  };\n}\nfunction FunnelTrapezoids(props) {\n  var {\n    trapezoids,\n    allOtherFunnelProps,\n    showLabels\n  } = props;\n  var activeItemIndex = useAppSelector(state => selectActiveIndex(state, 'item', state.tooltip.settings.trigger, undefined));\n  var {\n      onMouseEnter: onMouseEnterFromProps,\n      onClick: onItemClickFromProps,\n      onMouseLeave: onMouseLeaveFromProps,\n      shape,\n      activeShape\n    } = allOtherFunnelProps,\n    restOfAllOtherProps = _objectWithoutProperties(allOtherFunnelProps, _excluded);\n  var onMouseEnterFromContext = useMouseEnterItemDispatch(onMouseEnterFromProps, allOtherFunnelProps.dataKey);\n  var onMouseLeaveFromContext = useMouseLeaveItemDispatch(onMouseLeaveFromProps);\n  var onClickFromContext = useMouseClickItemDispatch(onItemClickFromProps, allOtherFunnelProps.dataKey);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, trapezoids.map((entry, i) => {\n    var isActiveIndex = activeShape && activeItemIndex === String(i);\n    var trapezoidOptions = isActiveIndex ? activeShape : shape;\n    var trapezoidProps = _objectSpread(_objectSpread({}, entry), {}, {\n      option: trapezoidOptions,\n      isActive: isActiveIndex,\n      stroke: entry.stroke\n    });\n    return /*#__PURE__*/React.createElement(Layer, _extends({\n      className: \"recharts-funnel-trapezoid\"\n    }, adaptEventsOfChild(restOfAllOtherProps, entry, i), {\n      // @ts-expect-error the types need a bit of attention\n      onMouseEnter: onMouseEnterFromContext(entry, i)\n      // @ts-expect-error the types need a bit of attention\n      ,\n\n      onMouseLeave: onMouseLeaveFromContext(entry, i)\n      // @ts-expect-error the types need a bit of attention\n      ,\n\n      onClick: onClickFromContext(entry, i),\n      key: \"trapezoid-\".concat(entry === null || entry === void 0 ? void 0 : entry.x, \"-\").concat(entry === null || entry === void 0 ? void 0 : entry.y, \"-\").concat(entry === null || entry === void 0 ? void 0 : entry.name, \"-\").concat(entry === null || entry === void 0 ? void 0 : entry.value)\n    }), /*#__PURE__*/React.createElement(FunnelTrapezoid, trapezoidProps));\n  }), showLabels && LabelList.renderCallByParent(allOtherFunnelProps, trapezoids));\n}\nvar latestId = 0;\n\n/**\n * This hook will return a unique animation id for the given reference.\n * The ID increments every time the reference changes.\n * @param reference The reference to track\n * @returns The unique animation ID\n */\nfunction useAnimationId(reference) {\n  var idRef = useRef(latestId);\n  var ref = useRef(reference);\n  if (ref.current !== reference) {\n    idRef.current += 1;\n    latestId = idRef.current;\n    ref.current = reference;\n  }\n  return idRef.current;\n}\nfunction TrapezoidsWithAnimation(_ref2) {\n  var {\n    previousTrapezoidsRef,\n    props\n  } = _ref2;\n  var {\n    trapezoids,\n    isAnimationActive,\n    animationBegin,\n    animationDuration,\n    animationEasing,\n    onAnimationEnd,\n    onAnimationStart\n  } = props;\n  var prevTrapezoids = previousTrapezoidsRef.current;\n  var [isAnimating, setIsAnimating] = useState(true);\n  var animationId = useAnimationId(trapezoids);\n  var handleAnimationEnd = useCallback(() => {\n    if (typeof onAnimationEnd === 'function') {\n      onAnimationEnd();\n    }\n    setIsAnimating(false);\n  }, [onAnimationEnd]);\n  var handleAnimationStart = useCallback(() => {\n    if (typeof onAnimationStart === 'function') {\n      onAnimationStart();\n    }\n    setIsAnimating(true);\n  }, [onAnimationStart]);\n  return /*#__PURE__*/React.createElement(Animate, {\n    begin: animationBegin,\n    duration: animationDuration,\n    isActive: isAnimationActive,\n    easing: animationEasing,\n    from: {\n      t: 0\n    },\n    to: {\n      t: 1\n    },\n    key: animationId,\n    onAnimationStart: handleAnimationStart,\n    onAnimationEnd: handleAnimationEnd\n  }, _ref3 => {\n    var {\n      t\n    } = _ref3;\n    var stepData = t === 1 ? trapezoids : trapezoids.map((entry, index) => {\n      var prev = prevTrapezoids && prevTrapezoids[index];\n      if (prev) {\n        var _interpolatorX = interpolateNumber(prev.x, entry.x);\n        var _interpolatorY = interpolateNumber(prev.y, entry.y);\n        var _interpolatorUpperWidth = interpolateNumber(prev.upperWidth, entry.upperWidth);\n        var _interpolatorLowerWidth = interpolateNumber(prev.lowerWidth, entry.lowerWidth);\n        var _interpolatorHeight = interpolateNumber(prev.height, entry.height);\n        return _objectSpread(_objectSpread({}, entry), {}, {\n          x: _interpolatorX(t),\n          y: _interpolatorY(t),\n          upperWidth: _interpolatorUpperWidth(t),\n          lowerWidth: _interpolatorLowerWidth(t),\n          height: _interpolatorHeight(t)\n        });\n      }\n      var interpolatorX = interpolateNumber(entry.x + entry.upperWidth / 2, entry.x);\n      var interpolatorY = interpolateNumber(entry.y + entry.height / 2, entry.y);\n      var interpolatorUpperWidth = interpolateNumber(0, entry.upperWidth);\n      var interpolatorLowerWidth = interpolateNumber(0, entry.lowerWidth);\n      var interpolatorHeight = interpolateNumber(0, entry.height);\n      return _objectSpread(_objectSpread({}, entry), {}, {\n        x: interpolatorX(t),\n        y: interpolatorY(t),\n        upperWidth: interpolatorUpperWidth(t),\n        lowerWidth: interpolatorLowerWidth(t),\n        height: interpolatorHeight(t)\n      });\n    });\n    if (t > 0) {\n      // eslint-disable-next-line no-param-reassign\n      previousTrapezoidsRef.current = stepData;\n    }\n    return /*#__PURE__*/React.createElement(Layer, null, /*#__PURE__*/React.createElement(FunnelTrapezoids, {\n      trapezoids: stepData,\n      allOtherFunnelProps: props,\n      showLabels: !isAnimating\n    }));\n  });\n}\nfunction RenderTrapezoids(props) {\n  var {\n    trapezoids,\n    isAnimationActive\n  } = props;\n  var previousTrapezoidsRef = useRef(null);\n  var prevTrapezoids = previousTrapezoidsRef.current;\n  if (isAnimationActive && trapezoids && trapezoids.length && (!prevTrapezoids || prevTrapezoids !== trapezoids)) {\n    return /*#__PURE__*/React.createElement(TrapezoidsWithAnimation, {\n      props: props,\n      previousTrapezoidsRef: previousTrapezoidsRef\n    });\n  }\n  return /*#__PURE__*/React.createElement(FunnelTrapezoids, {\n    trapezoids: trapezoids,\n    allOtherFunnelProps: props,\n    showLabels: true\n  });\n}\nvar getRealWidthHeight = (_ref4, offset) => {\n  var {\n    customWidth\n  } = _ref4;\n  var {\n    width,\n    height,\n    left,\n    right,\n    top,\n    bottom\n  } = offset;\n  var realHeight = height;\n  var realWidth = width;\n  if (isNumber(customWidth)) {\n    realWidth = customWidth;\n  } else if (typeof customWidth === 'string') {\n    realWidth = realWidth * parseFloat(customWidth) / 100;\n  }\n  return {\n    realWidth: realWidth - left - right - 50,\n    realHeight: realHeight - bottom - top,\n    offsetX: (width - realWidth) / 2,\n    offsetY: (height - realHeight) / 2\n  };\n};\nexport class FunnelWithState extends PureComponent {\n  render() {\n    var {\n      className\n    } = this.props;\n    var layerClass = clsx('recharts-trapezoids', className);\n    return /*#__PURE__*/React.createElement(Layer, {\n      className: layerClass\n    }, /*#__PURE__*/React.createElement(RenderTrapezoids, this.props));\n  }\n}\nvar defaultFunnelProps = {\n  stroke: '#fff',\n  fill: '#808080',\n  legendType: 'rect',\n  hide: false,\n  isAnimationActive: !Global.isSsr,\n  animationBegin: 400,\n  animationDuration: 1500,\n  animationEasing: 'ease',\n  nameKey: 'name',\n  lastShapeType: 'triangle'\n};\nfunction FunnelImpl(props) {\n  var {\n    height,\n    width\n  } = useOffset();\n  var _resolveDefaultProps = resolveDefaultProps(props, defaultFunnelProps),\n    {\n      stroke,\n      fill,\n      legendType,\n      hide,\n      isAnimationActive,\n      animationBegin,\n      animationDuration,\n      animationEasing,\n      nameKey,\n      lastShapeType\n    } = _resolveDefaultProps,\n    everythingElse = _objectWithoutProperties(_resolveDefaultProps, _excluded2);\n  var presentationProps = filterProps(props, false);\n  var cells = findAllByType(props.children, Cell);\n  var funnelSettings = useMemo(() => ({\n    dataKey: props.dataKey,\n    nameKey,\n    data: props.data,\n    tooltipType: props.tooltipType,\n    lastShapeType,\n    reversed: props.reversed,\n    customWidth: props.width,\n    cells,\n    presentationProps\n  }), [props.dataKey, nameKey, props.data, props.tooltipType, lastShapeType, props.reversed, props.width, cells, presentationProps]);\n  var {\n    trapezoids\n  } = useAppSelector(state => selectFunnelTrapezoids(state, funnelSettings));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SetTooltipEntrySettings, {\n    fn: getTooltipEntrySettings,\n    args: _objectSpread(_objectSpread({}, props), {}, {\n      trapezoids\n    })\n  }), hide ? null : /*#__PURE__*/React.createElement(FunnelWithState, _extends({}, everythingElse, {\n    stroke: stroke,\n    fill: fill,\n    nameKey: nameKey,\n    lastShapeType: lastShapeType,\n    animationBegin: animationBegin,\n    animationDuration: animationDuration,\n    animationEasing: animationEasing,\n    isAnimationActive: isAnimationActive,\n    hide: hide,\n    legendType: legendType,\n    height: height,\n    width: width,\n    trapezoids: trapezoids\n  })));\n}\nexport function computeFunnelTrapezoids(_ref5) {\n  var {\n    dataKey,\n    nameKey,\n    displayedData,\n    tooltipType,\n    lastShapeType,\n    reversed,\n    offset,\n    customWidth\n  } = _ref5;\n  var {\n    left,\n    top\n  } = offset;\n  var {\n    realHeight,\n    realWidth,\n    offsetX,\n    offsetY\n  } = getRealWidthHeight({\n    customWidth\n  }, offset);\n  var maxValue = Math.max.apply(null, displayedData.map(entry => getValueByDataKey(entry, dataKey, 0)));\n  var len = displayedData.length;\n  var rowHeight = realHeight / len;\n  var parentViewBox = {\n    x: offset.left,\n    y: offset.top,\n    width: offset.width,\n    height: offset.height\n  };\n  var trapezoids = displayedData.map((entry, i) => {\n    var rawVal = getValueByDataKey(entry, dataKey, 0);\n    var name = getValueByDataKey(entry, nameKey, i);\n    var val = rawVal;\n    var nextVal;\n    if (i !== len - 1) {\n      nextVal = getValueByDataKey(displayedData[i + 1], dataKey, 0);\n      if (nextVal instanceof Array) {\n        [nextVal] = nextVal;\n      }\n    } else if (rawVal instanceof Array && rawVal.length === 2) {\n      [val, nextVal] = rawVal;\n    } else if (lastShapeType === 'rectangle') {\n      nextVal = val;\n    } else {\n      nextVal = 0;\n    }\n\n    // @ts-expect-error getValueByDataKey does not validate the output type\n    var x = (maxValue - val) * realWidth / (2 * maxValue) + top + 25 + offsetX;\n    var y = rowHeight * i + left + offsetY;\n    // @ts-expect-error getValueByDataKey does not validate the output type\n    var upperWidth = val / maxValue * realWidth;\n    var lowerWidth = nextVal / maxValue * realWidth;\n    var tooltipPayload = [{\n      name,\n      value: val,\n      payload: entry,\n      dataKey,\n      type: tooltipType\n    }];\n    var tooltipPosition = {\n      x: x + upperWidth / 2,\n      y: y + rowHeight / 2\n    };\n    return _objectSpread(_objectSpread({\n      x,\n      y,\n      width: Math.max(upperWidth, lowerWidth),\n      upperWidth,\n      lowerWidth,\n      height: rowHeight,\n      // @ts-expect-error getValueByDataKey does not validate the output type\n      name,\n      val,\n      tooltipPayload,\n      tooltipPosition\n    }, omit(entry, ['width'])), {}, {\n      payload: entry,\n      parentViewBox,\n      labelViewBox: {\n        x: x + (upperWidth - lowerWidth) / 4,\n        y,\n        width: Math.abs(upperWidth - lowerWidth) / 2 + Math.min(upperWidth, lowerWidth),\n        height: rowHeight\n      }\n    });\n  });\n  if (reversed) {\n    trapezoids = trapezoids.map((entry, index) => {\n      var newY = entry.y - index * rowHeight + (len - 1 - index) * rowHeight;\n      return _objectSpread(_objectSpread({}, entry), {}, {\n        upperWidth: entry.lowerWidth,\n        lowerWidth: entry.upperWidth,\n        x: entry.x - (entry.lowerWidth - entry.upperWidth) / 2,\n        y: entry.y - index * rowHeight + (len - 1 - index) * rowHeight,\n        tooltipPosition: _objectSpread(_objectSpread({}, entry.tooltipPosition), {}, {\n          y: newY + rowHeight / 2\n        }),\n        labelViewBox: _objectSpread(_objectSpread({}, entry.labelViewBox), {}, {\n          y: newY\n        })\n      });\n    });\n  }\n  return {\n    trapezoids,\n    data: displayedData\n  };\n}\nexport class Funnel extends PureComponent {\n  render() {\n    return /*#__PURE__*/React.createElement(FunnelImpl, this.props);\n  }\n}\n_defineProperty(Funnel, \"displayName\", 'Funnel');\n_defineProperty(Funnel, \"defaultProps\", defaultFunnelProps);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}