{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\n// eslint-disable-next-line max-classes-per-file\nimport * as React from 'react';\nimport { PureComponent, useCallback, useRef, useState } from 'react';\nimport last from 'es-toolkit/compat/last';\nimport { clsx } from 'clsx';\nimport { interpolateNumber, isNullish } from '../util/DataUtils';\nimport { Global } from '../util/Global';\nimport { polarToCartesian } from '../util/PolarUtils';\nimport { getTooltipNameProp, getValueByDataKey } from '../util/ChartUtils';\nimport { Polygon } from '../shape/Polygon';\nimport { Dot } from '../shape/Dot';\nimport { Layer } from '../container/Layer';\nimport { LabelList } from '../component/LabelList';\nimport { filterProps } from '../util/ReactUtils';\nimport { ActivePoints } from '../component/ActivePoints';\nimport { SetTooltipEntrySettings } from '../state/SetTooltipEntrySettings';\nimport { PolarGraphicalItemContext } from '../context/PolarGraphicalItemContext';\nimport { selectRadarPoints } from '../state/selectors/radarSelectors';\nimport { useAppSelector } from '../state/hooks';\nimport { useIsPanorama } from '../context/PanoramaContext';\nimport { SetPolarLegendPayload } from '../state/SetLegendPayload';\nimport { useAnimationId } from '../util/useAnimationId';\nimport { Animate } from '../animation/Animate';\nfunction getLegendItemColor(stroke, fill) {\n  return stroke && stroke !== 'none' ? stroke : fill;\n}\nvar computeLegendPayloadFromRadarSectors = props => {\n  var {\n    dataKey,\n    name,\n    stroke,\n    fill,\n    legendType,\n    hide\n  } = props;\n  return [{\n    inactive: hide,\n    dataKey,\n    type: legendType,\n    color: getLegendItemColor(stroke, fill),\n    value: getTooltipNameProp(name, dataKey),\n    payload: props\n  }];\n};\nfunction getTooltipEntrySettings(props) {\n  var {\n    dataKey,\n    stroke,\n    strokeWidth,\n    fill,\n    name,\n    hide,\n    tooltipType\n  } = props;\n  return {\n    /*\n     * I suppose this here _could_ return props.points\n     * because while Radar does not support item tooltip mode, it _could_ support it.\n     * But when I actually do return the points here, a defaultIndex test starts failing.\n     * So, undefined it is.\n     */\n    dataDefinedOnItem: undefined,\n    positions: undefined,\n    settings: {\n      stroke,\n      strokeWidth,\n      fill,\n      nameKey: undefined,\n      // RadarChart does not have nameKey unfortunately\n      dataKey,\n      name: getTooltipNameProp(name, dataKey),\n      hide,\n      type: tooltipType,\n      color: getLegendItemColor(stroke, fill),\n      unit: '' // why doesn't Radar support unit?\n    }\n  };\n}\nfunction renderDotItem(option, props) {\n  var dotItem;\n  if (/*#__PURE__*/React.isValidElement(option)) {\n    // @ts-expect-error typescript is unhappy with cloned props type\n    dotItem = /*#__PURE__*/React.cloneElement(option, props);\n  } else if (typeof option === 'function') {\n    dotItem = option(props);\n  } else {\n    dotItem = /*#__PURE__*/React.createElement(Dot, _extends({}, props, {\n      className: clsx('recharts-radar-dot', typeof option !== 'boolean' ? option.className : '')\n    }));\n  }\n  return dotItem;\n}\nexport function computeRadarPoints(_ref) {\n  var {\n    radiusAxis,\n    angleAxis,\n    displayedData,\n    dataKey,\n    bandSize\n  } = _ref;\n  var {\n    cx,\n    cy\n  } = angleAxis;\n  var isRange = false;\n  var points = [];\n  var angleBandSize = angleAxis.type !== 'number' ? bandSize !== null && bandSize !== void 0 ? bandSize : 0 : 0;\n  displayedData.forEach((entry, i) => {\n    var name = getValueByDataKey(entry, angleAxis.dataKey, i);\n    var value = getValueByDataKey(entry, dataKey);\n    var angle = angleAxis.scale(name) + angleBandSize;\n    var pointValue = Array.isArray(value) ? last(value) : value;\n    var radius = isNullish(pointValue) ? undefined : radiusAxis.scale(pointValue);\n    if (Array.isArray(value) && value.length >= 2) {\n      isRange = true;\n    }\n    points.push(_objectSpread(_objectSpread({}, polarToCartesian(cx, cy, radius, angle)), {}, {\n      // @ts-expect-error getValueByDataKey does not validate the output type\n      name,\n      // @ts-expect-error getValueByDataKey does not validate the output type\n      value,\n      cx,\n      cy,\n      radius,\n      angle,\n      payload: entry\n    }));\n  });\n  var baseLinePoints = [];\n  if (isRange) {\n    points.forEach(point => {\n      if (Array.isArray(point.value)) {\n        var baseValue = point.value[0];\n        var radius = isNullish(baseValue) ? undefined : radiusAxis.scale(baseValue);\n        baseLinePoints.push(_objectSpread(_objectSpread({}, point), {}, {\n          radius\n        }, polarToCartesian(cx, cy, radius, point.angle)));\n      } else {\n        baseLinePoints.push(point);\n      }\n    });\n  }\n  return {\n    points,\n    isRange,\n    baseLinePoints\n  };\n}\nfunction Dots(_ref2) {\n  var {\n    points,\n    props\n  } = _ref2;\n  var {\n    dot,\n    dataKey\n  } = props;\n  if (!dot) {\n    return null;\n  }\n  var baseProps = filterProps(props, false);\n  var customDotProps = filterProps(dot, true);\n  var dots = points.map((entry, i) => {\n    var dotProps = _objectSpread(_objectSpread(_objectSpread({\n      key: \"dot-\".concat(i),\n      r: 3\n    }, baseProps), customDotProps), {}, {\n      dataKey,\n      cx: entry.x,\n      cy: entry.y,\n      index: i,\n      payload: entry\n    });\n    return renderDotItem(dot, dotProps);\n  });\n  return /*#__PURE__*/React.createElement(Layer, {\n    className: \"recharts-radar-dots\"\n  }, dots);\n}\nfunction StaticPolygon(_ref3) {\n  var {\n    points,\n    props,\n    showLabels\n  } = _ref3;\n  if (points == null) {\n    return null;\n  }\n  var {\n    shape,\n    isRange,\n    baseLinePoints,\n    connectNulls\n  } = props;\n  var handleMouseEnter = e => {\n    var {\n      onMouseEnter\n    } = props;\n    if (onMouseEnter) {\n      onMouseEnter(props, e);\n    }\n  };\n  var handleMouseLeave = e => {\n    var {\n      onMouseLeave\n    } = props;\n    if (onMouseLeave) {\n      onMouseLeave(props, e);\n    }\n  };\n  var radar;\n  if (/*#__PURE__*/React.isValidElement(shape)) {\n    radar = /*#__PURE__*/React.cloneElement(shape, _objectSpread(_objectSpread({}, props), {}, {\n      points\n    }));\n  } else if (typeof shape === 'function') {\n    radar = shape(_objectSpread(_objectSpread({}, props), {}, {\n      points\n    }));\n  } else {\n    radar = /*#__PURE__*/React.createElement(Polygon, _extends({}, filterProps(props, true), {\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave,\n      points: points,\n      baseLinePoints: isRange ? baseLinePoints : null,\n      connectNulls: connectNulls\n    }));\n  }\n  return /*#__PURE__*/React.createElement(Layer, {\n    className: \"recharts-radar-polygon\"\n  }, radar, /*#__PURE__*/React.createElement(Dots, {\n    props: props,\n    points: points\n  }), showLabels && LabelList.renderCallByParent(props, points));\n}\nfunction PolygonWithAnimation(_ref4) {\n  var {\n    props,\n    previousPointsRef\n  } = _ref4;\n  var {\n    points,\n    isAnimationActive,\n    animationBegin,\n    animationDuration,\n    animationEasing,\n    onAnimationEnd,\n    onAnimationStart\n  } = props;\n  var prevPoints = previousPointsRef.current;\n  var animationId = useAnimationId(props, 'recharts-radar-');\n  var [isAnimating, setIsAnimating] = useState(true);\n  var handleAnimationEnd = useCallback(() => {\n    if (typeof onAnimationEnd === 'function') {\n      onAnimationEnd();\n    }\n    setIsAnimating(false);\n  }, [onAnimationEnd]);\n  var handleAnimationStart = useCallback(() => {\n    if (typeof onAnimationStart === 'function') {\n      onAnimationStart();\n    }\n    setIsAnimating(true);\n  }, [onAnimationStart]);\n  return /*#__PURE__*/React.createElement(Animate, {\n    begin: animationBegin,\n    duration: animationDuration,\n    isActive: isAnimationActive,\n    easing: animationEasing,\n    from: {\n      t: 0\n    },\n    to: {\n      t: 1\n    },\n    key: \"radar-\".concat(animationId),\n    onAnimationEnd: handleAnimationEnd,\n    onAnimationStart: handleAnimationStart\n  }, _ref5 => {\n    var {\n      t\n    } = _ref5;\n    var prevPointsDiffFactor = prevPoints && prevPoints.length / points.length;\n    var stepData = t === 1 ? points : points.map((entry, index) => {\n      var prev = prevPoints && prevPoints[Math.floor(index * prevPointsDiffFactor)];\n      if (prev) {\n        var _interpolatorX = interpolateNumber(prev.x, entry.x);\n        var _interpolatorY = interpolateNumber(prev.y, entry.y);\n        return _objectSpread(_objectSpread({}, entry), {}, {\n          x: _interpolatorX(t),\n          y: _interpolatorY(t)\n        });\n      }\n      var interpolatorX = interpolateNumber(entry.cx, entry.x);\n      var interpolatorY = interpolateNumber(entry.cy, entry.y);\n      return _objectSpread(_objectSpread({}, entry), {}, {\n        x: interpolatorX(t),\n        y: interpolatorY(t)\n      });\n    });\n    if (t > 0) {\n      // eslint-disable-next-line no-param-reassign\n      previousPointsRef.current = stepData;\n    }\n    return /*#__PURE__*/React.createElement(StaticPolygon, {\n      points: stepData,\n      props: props,\n      showLabels: !isAnimating\n    });\n  });\n}\nfunction RenderPolygon(props) {\n  var {\n    points,\n    isAnimationActive,\n    isRange\n  } = props;\n  var previousPointsRef = useRef(undefined);\n  var prevPoints = previousPointsRef.current;\n  if (isAnimationActive && points && points.length && !isRange && (!prevPoints || prevPoints !== points)) {\n    return /*#__PURE__*/React.createElement(PolygonWithAnimation, {\n      props: props,\n      previousPointsRef: previousPointsRef\n    });\n  }\n  return /*#__PURE__*/React.createElement(StaticPolygon, {\n    points: points,\n    props: props,\n    showLabels: true\n  });\n}\nvar defaultRadarProps = {\n  angleAxisId: 0,\n  radiusAxisId: 0,\n  hide: false,\n  activeDot: true,\n  dot: false,\n  legendType: 'rect',\n  isAnimationActive: !Global.isSsr,\n  animationBegin: 0,\n  animationDuration: 1500,\n  animationEasing: 'ease'\n};\nclass RadarWithState extends PureComponent {\n  render() {\n    var {\n      hide,\n      className,\n      points\n    } = this.props;\n    if (hide) {\n      return null;\n    }\n    var layerClass = clsx('recharts-radar', className);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Layer, {\n      className: layerClass\n    }, /*#__PURE__*/React.createElement(RenderPolygon, this.props)), /*#__PURE__*/React.createElement(ActivePoints, {\n      points: points,\n      mainColor: getLegendItemColor(this.props.stroke, this.props.fill),\n      itemDataKey: this.props.dataKey,\n      activeDot: this.props.activeDot\n    }));\n  }\n}\nfunction RadarImpl(props) {\n  var isPanorama = useIsPanorama();\n  var radarPoints = useAppSelector(state => selectRadarPoints(state, props.radiusAxisId, props.angleAxisId, isPanorama, props.dataKey));\n  return /*#__PURE__*/React.createElement(RadarWithState, _extends({}, props, {\n    points: radarPoints === null || radarPoints === void 0 ? void 0 : radarPoints.points,\n    baseLinePoints: radarPoints === null || radarPoints === void 0 ? void 0 : radarPoints.baseLinePoints,\n    isRange: radarPoints === null || radarPoints === void 0 ? void 0 : radarPoints.isRange\n  }));\n}\nexport class Radar extends PureComponent {\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PolarGraphicalItemContext, {\n      data: undefined // Radar does not have data prop, why?\n      ,\n\n      dataKey: this.props.dataKey,\n      hide: this.props.hide,\n      angleAxisId: this.props.angleAxisId,\n      radiusAxisId: this.props.radiusAxisId,\n      stackId: undefined,\n      barSize: undefined,\n      type: \"radar\"\n    }), /*#__PURE__*/React.createElement(SetPolarLegendPayload, {\n      legendPayload: computeLegendPayloadFromRadarSectors(this.props)\n    }), /*#__PURE__*/React.createElement(SetTooltipEntrySettings, {\n      fn: getTooltipEntrySettings,\n      args: this.props\n    }), /*#__PURE__*/React.createElement(RadarImpl, this.props));\n  }\n}\n_defineProperty(Radar, \"displayName\", 'Radar');\n_defineProperty(Radar, \"defaultProps\", defaultRadarProps);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}