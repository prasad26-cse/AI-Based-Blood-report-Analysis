{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { isValidElement } from 'react';\nexport var RADIAN = Math.PI / 180;\nexport var degreeToRadian = angle => angle * Math.PI / 180;\nexport var radianToDegree = angleInRadian => angleInRadian * 180 / Math.PI;\nexport var polarToCartesian = (cx, cy, radius, angle) => ({\n  x: cx + Math.cos(-RADIAN * angle) * radius,\n  y: cy + Math.sin(-RADIAN * angle) * radius\n});\nexport var getMaxRadius = function getMaxRadius(width, height) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n  return Math.min(Math.abs(width - (offset.left || 0) - (offset.right || 0)), Math.abs(height - (offset.top || 0) - (offset.bottom || 0))) / 2;\n};\nexport var distanceBetweenPoints = (point, anotherPoint) => {\n  var {\n    x: x1,\n    y: y1\n  } = point;\n  var {\n    x: x2,\n    y: y2\n  } = anotherPoint;\n  return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\n};\nexport var getAngleOfPoint = (_ref, _ref2) => {\n  var {\n    x,\n    y\n  } = _ref;\n  var {\n    cx,\n    cy\n  } = _ref2;\n  var radius = distanceBetweenPoints({\n    x,\n    y\n  }, {\n    x: cx,\n    y: cy\n  });\n  if (radius <= 0) {\n    return {\n      radius,\n      angle: 0\n    };\n  }\n  var cos = (x - cx) / radius;\n  var angleInRadian = Math.acos(cos);\n  if (y > cy) {\n    angleInRadian = 2 * Math.PI - angleInRadian;\n  }\n  return {\n    radius,\n    angle: radianToDegree(angleInRadian),\n    angleInRadian\n  };\n};\nexport var formatAngleOfSector = _ref3 => {\n  var {\n    startAngle,\n    endAngle\n  } = _ref3;\n  var startCnt = Math.floor(startAngle / 360);\n  var endCnt = Math.floor(endAngle / 360);\n  var min = Math.min(startCnt, endCnt);\n  return {\n    startAngle: startAngle - min * 360,\n    endAngle: endAngle - min * 360\n  };\n};\nvar reverseFormatAngleOfSector = (angle, _ref4) => {\n  var {\n    startAngle,\n    endAngle\n  } = _ref4;\n  var startCnt = Math.floor(startAngle / 360);\n  var endCnt = Math.floor(endAngle / 360);\n  var min = Math.min(startCnt, endCnt);\n  return angle + min * 360;\n};\nexport var inRangeOfSector = (_ref5, viewBox) => {\n  var {\n    x,\n    y\n  } = _ref5;\n  var {\n    radius,\n    angle\n  } = getAngleOfPoint({\n    x,\n    y\n  }, viewBox);\n  var {\n    innerRadius,\n    outerRadius\n  } = viewBox;\n  if (radius < innerRadius || radius > outerRadius) {\n    return null;\n  }\n  if (radius === 0) {\n    return null;\n  }\n  var {\n    startAngle,\n    endAngle\n  } = formatAngleOfSector(viewBox);\n  var formatAngle = angle;\n  var inRange;\n  if (startAngle <= endAngle) {\n    while (formatAngle > endAngle) {\n      formatAngle -= 360;\n    }\n    while (formatAngle < startAngle) {\n      formatAngle += 360;\n    }\n    inRange = formatAngle >= startAngle && formatAngle <= endAngle;\n  } else {\n    while (formatAngle > startAngle) {\n      formatAngle -= 360;\n    }\n    while (formatAngle < endAngle) {\n      formatAngle += 360;\n    }\n    inRange = formatAngle >= endAngle && formatAngle <= startAngle;\n  }\n  if (inRange) {\n    return _objectSpread(_objectSpread({}, viewBox), {}, {\n      radius,\n      angle: reverseFormatAngleOfSector(formatAngle, viewBox)\n    });\n  }\n  return null;\n};\nexport var getTickClassName = tick => ! /*#__PURE__*/isValidElement(tick) && typeof tick !== 'function' && typeof tick !== 'boolean' && tick != null ? tick.className : '';","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}