{"ast":null,"code":"import { createAction, createListenerMiddleware } from '@reduxjs/toolkit';\nimport { setActiveMouseOverItemIndex, setMouseOverAxisIndex } from './tooltipSlice';\nimport { selectActivePropsFromChartPointer } from './selectors/selectActivePropsFromChartPointer';\nimport { getChartPointer } from '../util/getChartPointer';\nimport { selectTooltipEventType } from './selectors/selectTooltipEventType';\nimport { DATA_ITEM_DATAKEY_ATTRIBUTE_NAME, DATA_ITEM_INDEX_ATTRIBUTE_NAME } from '../util/Constants';\nimport { selectTooltipCoordinate } from './selectors/touchSelectors';\nexport var touchEventAction = createAction('touchMove');\nexport var touchEventMiddleware = createListenerMiddleware();\ntouchEventMiddleware.startListening({\n  actionCreator: touchEventAction,\n  effect: (action, listenerApi) => {\n    var touchEvent = action.payload;\n    var state = listenerApi.getState();\n    var tooltipEventType = selectTooltipEventType(state, state.tooltip.settings.shared);\n    if (tooltipEventType === 'axis') {\n      var activeProps = selectActivePropsFromChartPointer(state, getChartPointer({\n        clientX: touchEvent.touches[0].clientX,\n        clientY: touchEvent.touches[0].clientY,\n        currentTarget: touchEvent.currentTarget\n      }));\n      if ((activeProps === null || activeProps === void 0 ? void 0 : activeProps.activeIndex) != null) {\n        listenerApi.dispatch(setMouseOverAxisIndex({\n          activeIndex: activeProps.activeIndex,\n          activeDataKey: undefined,\n          activeCoordinate: activeProps.activeCoordinate\n        }));\n      }\n    } else if (tooltipEventType === 'item') {\n      var _target$getAttribute;\n      var touch = touchEvent.touches[0];\n      var target = document.elementFromPoint(touch.clientX, touch.clientY);\n      if (!target || !target.getAttribute) {\n        return;\n      }\n      var itemIndex = target.getAttribute(DATA_ITEM_INDEX_ATTRIBUTE_NAME);\n      var dataKey = (_target$getAttribute = target.getAttribute(DATA_ITEM_DATAKEY_ATTRIBUTE_NAME)) !== null && _target$getAttribute !== void 0 ? _target$getAttribute : undefined;\n      var coordinate = selectTooltipCoordinate(listenerApi.getState(), itemIndex, dataKey);\n      listenerApi.dispatch(setActiveMouseOverItemIndex({\n        activeDataKey: dataKey,\n        activeIndex: itemIndex,\n        activeCoordinate: coordinate\n      }));\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}