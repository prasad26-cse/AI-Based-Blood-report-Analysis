{"ast":null,"code":"var _excluded = [\"type\", \"size\", \"sizeType\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\n/**\n * @fileOverview Curve\n */\nimport * as React from 'react';\nimport { symbol as shapeSymbol, symbolCircle, symbolCross, symbolDiamond, symbolSquare, symbolStar, symbolTriangle, symbolWye } from 'victory-vendor/d3-shape';\nimport { clsx } from 'clsx';\nimport { filterProps } from '../util/ReactUtils';\nimport { upperFirst } from '../util/DataUtils';\nvar symbolFactories = {\n  symbolCircle,\n  symbolCross,\n  symbolDiamond,\n  symbolSquare,\n  symbolStar,\n  symbolTriangle,\n  symbolWye\n};\nvar RADIAN = Math.PI / 180;\nvar getSymbolFactory = type => {\n  var name = \"symbol\".concat(upperFirst(type));\n  return symbolFactories[name] || symbolCircle;\n};\nvar calculateAreaSize = (size, sizeType, type) => {\n  if (sizeType === 'area') {\n    return size;\n  }\n  switch (type) {\n    case 'cross':\n      return 5 * size * size / 9;\n    case 'diamond':\n      return 0.5 * size * size / Math.sqrt(3);\n    case 'square':\n      return size * size;\n    case 'star':\n      {\n        var angle = 18 * RADIAN;\n        return 1.25 * size * size * (Math.tan(angle) - Math.tan(angle * 2) * Math.tan(angle) ** 2);\n      }\n    case 'triangle':\n      return Math.sqrt(3) * size * size / 4;\n    case 'wye':\n      return (21 - 10 * Math.sqrt(3)) * size * size / 8;\n    default:\n      return Math.PI * size * size / 4;\n  }\n};\nvar registerSymbol = (key, factory) => {\n  symbolFactories[\"symbol\".concat(upperFirst(key))] = factory;\n};\nexport var Symbols = _ref => {\n  var {\n      type = 'circle',\n      size = 64,\n      sizeType = 'area'\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var props = _objectSpread(_objectSpread({}, rest), {}, {\n    type,\n    size,\n    sizeType\n  });\n\n  /**\n   * Calculate the path of curve\n   * @return {String} path\n   */\n  var getPath = () => {\n    var symbolFactory = getSymbolFactory(type);\n    var symbol = shapeSymbol().type(symbolFactory).size(calculateAreaSize(size, sizeType, type));\n    return symbol();\n  };\n  var {\n    className,\n    cx,\n    cy\n  } = props;\n  var filteredProps = filterProps(props, true);\n  if (cx === +cx && cy === +cy && size === +size) {\n    return /*#__PURE__*/React.createElement(\"path\", _extends({}, filteredProps, {\n      className: clsx('recharts-symbols', className),\n      transform: \"translate(\".concat(cx, \", \").concat(cy, \")\"),\n      d: getPath()\n    }));\n  }\n  return null;\n};\nSymbols.registerSymbol = registerSymbol;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}