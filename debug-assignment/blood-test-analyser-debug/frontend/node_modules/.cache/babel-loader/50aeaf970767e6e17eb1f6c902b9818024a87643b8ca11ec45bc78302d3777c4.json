{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, Symbol.toStringTag, {\n  value: 'Module'\n});\nconst isPlainObject = require('./isPlainObject.js');\nconst getSymbols = require('../compat/_internal/getSymbols.js');\nconst getTag = require('../compat/_internal/getTag.js');\nconst tags = require('../compat/_internal/tags.js');\nconst eq = require('../compat/util/eq.js');\nfunction isEqualWith(a, b, areValuesEqual) {\n  return isEqualWithImpl(a, b, undefined, undefined, undefined, undefined, areValuesEqual);\n}\nfunction isEqualWithImpl(a, b, property, aParent, bParent, stack, areValuesEqual) {\n  const result = areValuesEqual(a, b, property, aParent, bParent, stack);\n  if (result !== undefined) {\n    return result;\n  }\n  if (typeof a === typeof b) {\n    switch (typeof a) {\n      case 'bigint':\n      case 'string':\n      case 'boolean':\n      case 'symbol':\n      case 'undefined':\n        {\n          return a === b;\n        }\n      case 'number':\n        {\n          return a === b || Object.is(a, b);\n        }\n      case 'function':\n        {\n          return a === b;\n        }\n      case 'object':\n        {\n          return areObjectsEqual(a, b, stack, areValuesEqual);\n        }\n    }\n  }\n  return areObjectsEqual(a, b, stack, areValuesEqual);\n}\nfunction areObjectsEqual(a, b, stack, areValuesEqual) {\n  if (Object.is(a, b)) {\n    return true;\n  }\n  let aTag = getTag.getTag(a);\n  let bTag = getTag.getTag(b);\n  if (aTag === tags.argumentsTag) {\n    aTag = tags.objectTag;\n  }\n  if (bTag === tags.argumentsTag) {\n    bTag = tags.objectTag;\n  }\n  if (aTag !== bTag) {\n    return false;\n  }\n  switch (aTag) {\n    case tags.stringTag:\n      return a.toString() === b.toString();\n    case tags.numberTag:\n      {\n        const x = a.valueOf();\n        const y = b.valueOf();\n        return eq.eq(x, y);\n      }\n    case tags.booleanTag:\n    case tags.dateTag:\n    case tags.symbolTag:\n      return Object.is(a.valueOf(), b.valueOf());\n    case tags.regexpTag:\n      {\n        return a.source === b.source && a.flags === b.flags;\n      }\n    case tags.functionTag:\n      {\n        return a === b;\n      }\n  }\n  stack = stack ?? new Map();\n  const aStack = stack.get(a);\n  const bStack = stack.get(b);\n  if (aStack != null && bStack != null) {\n    return aStack === b;\n  }\n  stack.set(a, b);\n  stack.set(b, a);\n  try {\n    switch (aTag) {\n      case tags.mapTag:\n        {\n          if (a.size !== b.size) {\n            return false;\n          }\n          for (const [key, value] of a.entries()) {\n            if (!b.has(key) || !isEqualWithImpl(value, b.get(key), key, a, b, stack, areValuesEqual)) {\n              return false;\n            }\n          }\n          return true;\n        }\n      case tags.setTag:\n        {\n          if (a.size !== b.size) {\n            return false;\n          }\n          const aValues = Array.from(a.values());\n          const bValues = Array.from(b.values());\n          for (let i = 0; i < aValues.length; i++) {\n            const aValue = aValues[i];\n            const index = bValues.findIndex(bValue => {\n              return isEqualWithImpl(aValue, bValue, undefined, a, b, stack, areValuesEqual);\n            });\n            if (index === -1) {\n              return false;\n            }\n            bValues.splice(index, 1);\n          }\n          return true;\n        }\n      case tags.arrayTag:\n      case tags.uint8ArrayTag:\n      case tags.uint8ClampedArrayTag:\n      case tags.uint16ArrayTag:\n      case tags.uint32ArrayTag:\n      case tags.bigUint64ArrayTag:\n      case tags.int8ArrayTag:\n      case tags.int16ArrayTag:\n      case tags.int32ArrayTag:\n      case tags.bigInt64ArrayTag:\n      case tags.float32ArrayTag:\n      case tags.float64ArrayTag:\n        {\n          if (typeof Buffer !== 'undefined' && Buffer.isBuffer(a) !== Buffer.isBuffer(b)) {\n            return false;\n          }\n          if (a.length !== b.length) {\n            return false;\n          }\n          for (let i = 0; i < a.length; i++) {\n            if (!isEqualWithImpl(a[i], b[i], i, a, b, stack, areValuesEqual)) {\n              return false;\n            }\n          }\n          return true;\n        }\n      case tags.arrayBufferTag:\n        {\n          if (a.byteLength !== b.byteLength) {\n            return false;\n          }\n          return areObjectsEqual(new Uint8Array(a), new Uint8Array(b), stack, areValuesEqual);\n        }\n      case tags.dataViewTag:\n        {\n          if (a.byteLength !== b.byteLength || a.byteOffset !== b.byteOffset) {\n            return false;\n          }\n          return areObjectsEqual(new Uint8Array(a), new Uint8Array(b), stack, areValuesEqual);\n        }\n      case tags.errorTag:\n        {\n          return a.name === b.name && a.message === b.message;\n        }\n      case tags.objectTag:\n        {\n          const areEqualInstances = areObjectsEqual(a.constructor, b.constructor, stack, areValuesEqual) || isPlainObject.isPlainObject(a) && isPlainObject.isPlainObject(b);\n          if (!areEqualInstances) {\n            return false;\n          }\n          const aKeys = [...Object.keys(a), ...getSymbols.getSymbols(a)];\n          const bKeys = [...Object.keys(b), ...getSymbols.getSymbols(b)];\n          if (aKeys.length !== bKeys.length) {\n            return false;\n          }\n          for (let i = 0; i < aKeys.length; i++) {\n            const propKey = aKeys[i];\n            const aProp = a[propKey];\n            if (!Object.hasOwn(b, propKey)) {\n              return false;\n            }\n            const bProp = b[propKey];\n            if (!isEqualWithImpl(aProp, bProp, propKey, a, b, stack, areValuesEqual)) {\n              return false;\n            }\n          }\n          return true;\n        }\n      default:\n        {\n          return false;\n        }\n    }\n  } finally {\n    stack.delete(a);\n    stack.delete(b);\n  }\n}\nexports.isEqualWith = isEqualWith;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}