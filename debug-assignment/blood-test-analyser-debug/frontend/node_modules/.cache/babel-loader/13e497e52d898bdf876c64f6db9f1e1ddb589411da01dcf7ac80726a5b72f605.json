{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { createSelector } from 'reselect';\nimport { computePieSectors } from '../../polar/Pie';\nimport { selectChartDataAndAlwaysIgnoreIndexes } from './dataSelectors';\nimport { selectChartOffset } from './selectChartOffset';\nimport { getTooltipNameProp, getValueByDataKey } from '../../util/ChartUtils';\nimport { selectUnfilteredPolarItems } from './polarSelectors';\nvar pickPieSettings = (_state, pieSettings) => pieSettings;\n\n// Keep stable reference to an empty array to prevent re-renders\nvar emptyArray = [];\nvar pickCells = (_state, _pieSettings, cells) => {\n  if ((cells === null || cells === void 0 ? void 0 : cells.length) === 0) {\n    return emptyArray;\n  }\n  return cells;\n};\nexport var selectDisplayedData = createSelector([selectChartDataAndAlwaysIgnoreIndexes, pickPieSettings, pickCells], (_ref, pieSettings, cells) => {\n  var {\n    chartData\n  } = _ref;\n  var displayedData;\n  if ((pieSettings === null || pieSettings === void 0 ? void 0 : pieSettings.data) != null && pieSettings.data.length > 0) {\n    displayedData = pieSettings.data;\n  } else {\n    displayedData = chartData;\n  }\n  if ((!displayedData || !displayedData.length) && cells != null) {\n    displayedData = cells.map(cell => _objectSpread(_objectSpread({}, pieSettings.presentationProps), cell.props));\n  }\n  if (displayedData == null) {\n    return undefined;\n  }\n  return displayedData;\n});\nexport var selectPieLegend = createSelector([selectDisplayedData, pickPieSettings, pickCells], (displayedData, pieSettings, cells) => {\n  if (displayedData == null) {\n    return undefined;\n  }\n  return displayedData.map((entry, i) => {\n    var _cells$i;\n    var name = getValueByDataKey(entry, pieSettings.nameKey, pieSettings.name);\n    var color;\n    if (cells !== null && cells !== void 0 && (_cells$i = cells[i]) !== null && _cells$i !== void 0 && (_cells$i = _cells$i.props) !== null && _cells$i !== void 0 && _cells$i.fill) {\n      color = cells[i].props.fill;\n    } else if (typeof entry === 'object' && entry != null && 'fill' in entry) {\n      color = entry.fill;\n    } else {\n      color = pieSettings.fill;\n    }\n    return {\n      value: getTooltipNameProp(name, pieSettings.dataKey),\n      color,\n      payload: entry,\n      type: pieSettings.legendType\n    };\n  });\n});\nvar selectSynchronisedPieSettings = createSelector([selectUnfilteredPolarItems, pickPieSettings], (graphicalItems, pieSettingsFromProps) => {\n  if (graphicalItems.some(pgis => pgis.type === 'pie' && pieSettingsFromProps.dataKey === pgis.dataKey && pieSettingsFromProps.data === pgis.data)) {\n    return pieSettingsFromProps;\n  }\n  return undefined;\n});\nexport var selectPieSectors = createSelector([selectDisplayedData, selectSynchronisedPieSettings, pickCells, selectChartOffset], (displayedData, pieSettings, cells, offset) => {\n  if (pieSettings == null || displayedData == null) {\n    return undefined;\n  }\n  return computePieSectors({\n    offset,\n    pieSettings,\n    displayedData,\n    cells\n  });\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}