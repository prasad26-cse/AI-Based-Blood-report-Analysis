{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, Symbol.toStringTag, {\n  value: 'Module'\n});\nconst isMatch = require('./isMatch.js');\nconst isObject = require('./isObject.js');\nconst isPrimitive = require('../../predicate/isPrimitive.js');\nconst eq = require('../util/eq.js');\nfunction isMatchWith(target, source, compare) {\n  if (typeof compare !== 'function') {\n    return isMatch.isMatch(target, source);\n  }\n  return isMatchWithInternal(target, source, function doesMatch(objValue, srcValue, key, object, source, stack) {\n    const isEqual = compare(objValue, srcValue, key, object, source, stack);\n    if (isEqual !== undefined) {\n      return Boolean(isEqual);\n    }\n    return isMatchWithInternal(objValue, srcValue, doesMatch, stack);\n  }, new Map());\n}\nfunction isMatchWithInternal(target, source, compare, stack) {\n  if (source === target) {\n    return true;\n  }\n  switch (typeof source) {\n    case 'object':\n      {\n        return isObjectMatch(target, source, compare, stack);\n      }\n    case 'function':\n      {\n        const sourceKeys = Object.keys(source);\n        if (sourceKeys.length > 0) {\n          return isMatchWithInternal(target, {\n            ...source\n          }, compare, stack);\n        }\n        return eq.eq(target, source);\n      }\n    default:\n      {\n        if (!isObject.isObject(target)) {\n          return eq.eq(target, source);\n        }\n        if (typeof source === 'string') {\n          return source === '';\n        }\n        return true;\n      }\n  }\n}\nfunction isObjectMatch(target, source, compare, stack) {\n  if (source == null) {\n    return true;\n  }\n  if (Array.isArray(source)) {\n    return isArrayMatch(target, source, compare, stack);\n  }\n  if (source instanceof Map) {\n    return isMapMatch(target, source, compare, stack);\n  }\n  if (source instanceof Set) {\n    return isSetMatch(target, source, compare, stack);\n  }\n  const keys = Object.keys(source);\n  if (target == null) {\n    return keys.length === 0;\n  }\n  if (keys.length === 0) {\n    return true;\n  }\n  if (stack && stack.has(source)) {\n    return stack.get(source) === target;\n  }\n  if (stack) {\n    stack.set(source, target);\n  }\n  try {\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (!isPrimitive.isPrimitive(target) && !(key in target)) {\n        return false;\n      }\n      if (source[key] === undefined && target[key] !== undefined) {\n        return false;\n      }\n      if (source[key] === null && target[key] !== null) {\n        return false;\n      }\n      const isEqual = compare(target[key], source[key], key, target, source, stack);\n      if (!isEqual) {\n        return false;\n      }\n    }\n    return true;\n  } finally {\n    if (stack) {\n      stack.delete(source);\n    }\n  }\n}\nfunction isMapMatch(target, source, compare, stack) {\n  if (source.size === 0) {\n    return true;\n  }\n  if (!(target instanceof Map)) {\n    return false;\n  }\n  for (const [key, sourceValue] of source.entries()) {\n    const targetValue = target.get(key);\n    const isEqual = compare(targetValue, sourceValue, key, target, source, stack);\n    if (isEqual === false) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isArrayMatch(target, source, compare, stack) {\n  if (source.length === 0) {\n    return true;\n  }\n  if (!Array.isArray(target)) {\n    return false;\n  }\n  const countedIndex = new Set();\n  for (let i = 0; i < source.length; i++) {\n    const sourceItem = source[i];\n    let found = false;\n    for (let j = 0; j < target.length; j++) {\n      if (countedIndex.has(j)) {\n        continue;\n      }\n      const targetItem = target[j];\n      let matches = false;\n      const isEqual = compare(targetItem, sourceItem, i, target, source, stack);\n      if (isEqual) {\n        matches = true;\n      }\n      if (matches) {\n        countedIndex.add(j);\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isSetMatch(target, source, compare, stack) {\n  if (source.size === 0) {\n    return true;\n  }\n  if (!(target instanceof Set)) {\n    return false;\n  }\n  return isArrayMatch([...target], [...source], compare, stack);\n}\nexports.isMatchWith = isMatchWith;\nexports.isSetMatch = isSetMatch;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}