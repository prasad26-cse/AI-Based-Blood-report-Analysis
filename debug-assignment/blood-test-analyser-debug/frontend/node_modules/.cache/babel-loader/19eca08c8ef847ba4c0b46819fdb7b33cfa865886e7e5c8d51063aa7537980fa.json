{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { getIntersectionKeys, mapObject } from './util';\nexport var alpha = (begin, end, k) => begin + (end - begin) * k;\nvar needContinue = _ref => {\n  var {\n    from,\n    to\n  } = _ref;\n  return from !== to;\n};\n/*\n * @description: cal new from value and velocity in each stepper\n * @return: { [styleProperty]: { from, to, velocity } }\n */\nvar calStepperVals = (easing, preVals, steps) => {\n  var nextStepVals = mapObject((key, val) => {\n    if (needContinue(val)) {\n      var [newX, newV] = easing(val.from, val.to, val.velocity);\n      return _objectSpread(_objectSpread({}, val), {}, {\n        from: newX,\n        velocity: newV\n      });\n    }\n    return val;\n  }, preVals);\n  if (steps < 1) {\n    return mapObject((key, val) => {\n      if (needContinue(val)) {\n        return _objectSpread(_objectSpread({}, val), {}, {\n          velocity: alpha(val.velocity, nextStepVals[key].velocity, steps),\n          from: alpha(val.from, nextStepVals[key].from, steps)\n        });\n      }\n      return val;\n    }, preVals);\n  }\n  return calStepperVals(easing, nextStepVals, steps - 1);\n};\nfunction createStepperUpdate(from, to, easing, interKeys, render, timeoutController) {\n  var preTime;\n  var stepperStyle = interKeys.reduce((res, key) => _objectSpread(_objectSpread({}, res), {}, {\n    [key]: {\n      from: from[key],\n      velocity: 0,\n      to: to[key]\n    }\n  }), {});\n  var getCurrStyle = () => mapObject((key, val) => val.from, stepperStyle);\n  var shouldStopAnimation = () => !Object.values(stepperStyle).filter(needContinue).length;\n  var stopAnimation = null;\n  var stepperUpdate = now => {\n    if (!preTime) {\n      preTime = now;\n    }\n    var deltaTime = now - preTime;\n    var steps = deltaTime / easing.dt;\n    stepperStyle = calStepperVals(easing, stepperStyle, steps);\n    // get union set and add compatible prefix\n    render(_objectSpread(_objectSpread(_objectSpread({}, from), to), getCurrStyle()));\n    preTime = now;\n    if (!shouldStopAnimation()) {\n      stopAnimation = timeoutController.setTimeout(stepperUpdate);\n    }\n  };\n\n  // return start animation method\n  return () => {\n    stopAnimation = timeoutController.setTimeout(stepperUpdate);\n\n    // return stop animation method\n    return () => {\n      stopAnimation();\n    };\n  };\n}\nfunction createTimingUpdate(from, to, easing, duration, interKeys, render, timeoutController) {\n  var stopAnimation = null;\n  var timingStyle = interKeys.reduce((res, key) => _objectSpread(_objectSpread({}, res), {}, {\n    [key]: [from[key], to[key]]\n  }), {});\n  var beginTime;\n  var timingUpdate = now => {\n    if (!beginTime) {\n      beginTime = now;\n    }\n    var t = (now - beginTime) / duration;\n    var currStyle = mapObject((key, val) => alpha(...val, easing(t)), timingStyle);\n\n    // get union set and add compatible prefix\n    render(_objectSpread(_objectSpread(_objectSpread({}, from), to), currStyle));\n    if (t < 1) {\n      stopAnimation = timeoutController.setTimeout(timingUpdate);\n    } else {\n      var finalStyle = mapObject((key, val) => alpha(...val, easing(1)), timingStyle);\n      render(_objectSpread(_objectSpread(_objectSpread({}, from), to), finalStyle));\n    }\n  };\n\n  // return start animation method\n  return () => {\n    stopAnimation = timeoutController.setTimeout(timingUpdate);\n\n    // return stop animation method\n    return () => {\n      stopAnimation();\n    };\n  };\n}\n\n// configure update function\n// eslint-disable-next-line import/no-default-export\nexport default (from, to, easing, duration, render, timeoutController) => {\n  var interKeys = getIntersectionKeys(from, to);\n  return easing.isStepper === true ? createStepperUpdate(from, to, easing, interKeys, render, timeoutController) : createTimingUpdate(from, to, easing, duration, interKeys, render, timeoutController);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}