{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nimport * as React from 'react';\nimport { Component, useEffect } from 'react';\nimport { clsx } from 'clsx';\nimport { Layer } from '../container/Layer';\nimport { Label } from '../component/Label';\nimport { createLabeledScales, rectWithPoints } from '../util/CartesianUtils';\nimport { isNumOrStr } from '../util/DataUtils';\nimport { Rectangle } from '../shape/Rectangle';\nimport { filterProps } from '../util/ReactUtils';\nimport { addArea, removeArea } from '../state/referenceElementsSlice';\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\nimport { selectAxisScale } from '../state/selectors/axisSelectors';\nimport { useIsPanorama } from '../context/PanoramaContext';\nimport { useClipPathId } from '../container/ClipPathProvider';\nvar getRect = (hasX1, hasX2, hasY1, hasY2, xAxisScale, yAxisScale, props) => {\n  var {\n    x1: xValue1,\n    x2: xValue2,\n    y1: yValue1,\n    y2: yValue2\n  } = props;\n  if (xAxisScale == null || yAxisScale == null) {\n    return null;\n  }\n  var scales = createLabeledScales({\n    x: xAxisScale,\n    y: yAxisScale\n  });\n  var p1 = {\n    x: hasX1 ? scales.x.apply(xValue1, {\n      position: 'start'\n    }) : scales.x.rangeMin,\n    y: hasY1 ? scales.y.apply(yValue1, {\n      position: 'start'\n    }) : scales.y.rangeMin\n  };\n  var p2 = {\n    x: hasX2 ? scales.x.apply(xValue2, {\n      position: 'end'\n    }) : scales.x.rangeMax,\n    y: hasY2 ? scales.y.apply(yValue2, {\n      position: 'end'\n    }) : scales.y.rangeMax\n  };\n  if (props.ifOverflow === 'discard' && (!scales.isInRange(p1) || !scales.isInRange(p2))) {\n    return null;\n  }\n  return rectWithPoints(p1, p2);\n};\nvar renderRect = (option, props) => {\n  var rect;\n  if (/*#__PURE__*/React.isValidElement(option)) {\n    rect = /*#__PURE__*/React.cloneElement(option, props);\n  } else if (typeof option === 'function') {\n    rect = option(props);\n  } else {\n    rect = /*#__PURE__*/React.createElement(Rectangle, _extends({}, props, {\n      className: \"recharts-reference-area-rect\"\n    }));\n  }\n  return rect;\n};\nfunction ReportReferenceArea(props) {\n  var dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(addArea(props));\n    return () => {\n      dispatch(removeArea(props));\n    };\n  });\n  return null;\n}\nfunction ReferenceAreaImpl(props) {\n  var {\n    x1,\n    x2,\n    y1,\n    y2,\n    className,\n    shape,\n    xAxisId,\n    yAxisId\n  } = props;\n  var clipPathId = useClipPathId();\n  var isPanorama = useIsPanorama();\n  var xAxisScale = useAppSelector(state => selectAxisScale(state, 'xAxis', xAxisId, isPanorama));\n  var yAxisScale = useAppSelector(state => selectAxisScale(state, 'yAxis', yAxisId, isPanorama));\n  if (xAxisScale == null || !yAxisScale == null) {\n    return null;\n  }\n  var hasX1 = isNumOrStr(x1);\n  var hasX2 = isNumOrStr(x2);\n  var hasY1 = isNumOrStr(y1);\n  var hasY2 = isNumOrStr(y2);\n  if (!hasX1 && !hasX2 && !hasY1 && !hasY2 && !shape) {\n    return null;\n  }\n  var rect = getRect(hasX1, hasX2, hasY1, hasY2, xAxisScale, yAxisScale, props);\n  if (!rect && !shape) {\n    return null;\n  }\n  var isOverflowHidden = props.ifOverflow === 'hidden';\n  var clipPath = isOverflowHidden ? \"url(#\".concat(clipPathId, \")\") : undefined;\n  return /*#__PURE__*/React.createElement(Layer, {\n    className: clsx('recharts-reference-area', className)\n  }, renderRect(shape, _objectSpread(_objectSpread({\n    clipPath\n  }, filterProps(props, true)), rect)), Label.renderCallByParent(props, rect));\n}\nfunction ReferenceAreaSettingsDispatcher(props) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReportReferenceArea, {\n    yAxisId: props.yAxisId,\n    xAxisId: props.xAxisId,\n    ifOverflow: props.ifOverflow,\n    x1: props.x1,\n    x2: props.x2,\n    y1: props.y1,\n    y2: props.y2\n  }), /*#__PURE__*/React.createElement(ReferenceAreaImpl, props));\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class ReferenceArea extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(ReferenceAreaSettingsDispatcher, this.props);\n  }\n}\n_defineProperty(ReferenceArea, \"displayName\", 'ReferenceArea');\n_defineProperty(ReferenceArea, \"defaultProps\", {\n  ifOverflow: 'discard',\n  xAxisId: 0,\n  yAxisId: 0,\n  r: 10,\n  fill: '#ccc',\n  fillOpacity: 0.5,\n  stroke: 'none',\n  strokeWidth: 1\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}