{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { createSelector } from 'reselect';\nimport { computeFunnelTrapezoids } from '../../cartesian/Funnel';\nimport { selectChartOffset } from './selectChartOffset';\nimport { selectChartDataAndAlwaysIgnoreIndexes } from './dataSelectors';\nvar pickFunnelSettings = (_state, funnelSettings) => funnelSettings;\nexport var selectFunnelTrapezoids = createSelector([selectChartOffset, pickFunnelSettings, selectChartDataAndAlwaysIgnoreIndexes], (offset, _ref, _ref2) => {\n  var {\n    data,\n    dataKey,\n    nameKey,\n    tooltipType,\n    lastShapeType,\n    reversed,\n    customWidth,\n    cells,\n    presentationProps\n  } = _ref;\n  var {\n    chartData\n  } = _ref2;\n  var displayedData;\n  if (data != null && data.length > 0) {\n    displayedData = data;\n  } else if (chartData != null && chartData.length > 0) {\n    displayedData = chartData;\n  }\n  if (displayedData && displayedData.length) {\n    displayedData = displayedData.map((entry, index) => _objectSpread(_objectSpread(_objectSpread({\n      payload: entry\n    }, presentationProps), entry), cells && cells[index] && cells[index].props));\n  } else if (cells && cells.length) {\n    displayedData = cells.map(cell => _objectSpread(_objectSpread({}, presentationProps), cell.props));\n  } else {\n    return {\n      trapezoids: [],\n      data: displayedData\n    };\n  }\n  return computeFunnelTrapezoids({\n    dataKey,\n    nameKey,\n    displayedData,\n    tooltipType,\n    lastShapeType,\n    reversed,\n    offset,\n    customWidth\n  });\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}