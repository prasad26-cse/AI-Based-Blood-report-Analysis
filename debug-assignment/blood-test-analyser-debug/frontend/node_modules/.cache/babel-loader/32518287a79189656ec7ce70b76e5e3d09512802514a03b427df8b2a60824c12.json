{"ast":null,"code":"var _excluded = [\"children\"];\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nimport * as React from 'react';\nimport { forwardRef } from 'react';\nimport { useChartHeight, useChartWidth } from '../context/chartLayoutContext';\nimport { useAccessibilityLayer } from '../context/accessibilityContext';\nimport { useIsPanorama } from '../context/PanoramaContext';\nimport { Surface } from './Surface';\nimport { useAppSelector } from '../state/hooks';\nimport { selectBrushDimensions } from '../state/selectors/brushSelectors';\nimport { isPositiveNumber } from '../util/isWellBehavedNumber';\nvar FULL_WIDTH_AND_HEIGHT = {\n  width: '100%',\n  height: '100%'\n};\nvar MainChartSurface = /*#__PURE__*/forwardRef((props, ref) => {\n  var width = useChartWidth();\n  var height = useChartHeight();\n  var hasAccessibilityLayer = useAccessibilityLayer();\n  if (!isPositiveNumber(width) || !isPositiveNumber(height)) {\n    return null;\n  }\n  var {\n    children,\n    otherAttributes,\n    title,\n    desc\n  } = props;\n  var tabIndex, role;\n  if (typeof otherAttributes.tabIndex === 'number') {\n    tabIndex = otherAttributes.tabIndex;\n  } else {\n    tabIndex = hasAccessibilityLayer ? 0 : undefined;\n  }\n  if (typeof otherAttributes.role === 'string') {\n    role = otherAttributes.role;\n  } else {\n    role = hasAccessibilityLayer ? 'application' : undefined;\n  }\n  return /*#__PURE__*/React.createElement(Surface, _extends({}, otherAttributes, {\n    title: title,\n    desc: desc,\n    role: role,\n    tabIndex: tabIndex,\n    width: width,\n    height: height,\n    style: FULL_WIDTH_AND_HEIGHT,\n    ref: ref\n  }), children);\n});\nvar BrushPanoramaSurface = _ref => {\n  var {\n    children\n  } = _ref;\n  var brushDimensions = useAppSelector(selectBrushDimensions);\n  if (!brushDimensions) {\n    return null;\n  }\n  var {\n    width,\n    height,\n    y,\n    x\n  } = brushDimensions;\n  return /*#__PURE__*/React.createElement(Surface, {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  }, children);\n};\nexport var RootSurface = /*#__PURE__*/forwardRef((_ref2, ref) => {\n  var {\n      children\n    } = _ref2,\n    rest = _objectWithoutProperties(_ref2, _excluded);\n  var isPanorama = useIsPanorama();\n  if (isPanorama) {\n    return /*#__PURE__*/React.createElement(BrushPanoramaSurface, null, children);\n  }\n  return /*#__PURE__*/React.createElement(MainChartSurface, _extends({\n    ref: ref\n  }, rest), children);\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}