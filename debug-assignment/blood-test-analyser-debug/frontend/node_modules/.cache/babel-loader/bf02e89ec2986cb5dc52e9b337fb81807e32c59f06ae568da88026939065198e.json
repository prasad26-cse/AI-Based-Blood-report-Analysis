{"ast":null,"code":"var _excluded = [\"viewBox\"],\n  _excluded2 = [\"viewBox\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n/**\n * @fileOverview Cartesian Axis\n */\nimport * as React from 'react';\nimport { Component } from 'react';\nimport get from 'es-toolkit/compat/get';\nimport { clsx } from 'clsx';\nimport { shallowEqual } from '../util/ShallowEqual';\nimport { Layer } from '../container/Layer';\nimport { Text } from '../component/Text';\nimport { Label } from '../component/Label';\nimport { isNumber } from '../util/DataUtils';\nimport { adaptEventsOfChild } from '../util/types';\nimport { filterProps } from '../util/ReactUtils';\nimport { getTicks } from './getTicks';\n\n/** The orientation of the axis in correspondence to the chart */\n\n/** A unit to be appended to a value */\n\n/** The formatter function of tick */\n\n/*\n * `viewBox` and `scale` are SVG attributes.\n * Recharts however - unfortunately - has its own attributes named `viewBox` and `scale`\n * that are completely different data shape and different purpose.\n */\n\nexport class CartesianAxis extends Component {\n  constructor(props) {\n    super(props);\n    this.tickRefs = /*#__PURE__*/React.createRef();\n    this.tickRefs.current = [];\n    this.state = {\n      fontSize: '',\n      letterSpacing: ''\n    };\n  }\n  shouldComponentUpdate(_ref, nextState) {\n    var {\n        viewBox\n      } = _ref,\n      restProps = _objectWithoutProperties(_ref, _excluded);\n    // props.viewBox is sometimes generated every time -\n    // check that specially as object equality is likely to fail\n    var _this$props = this.props,\n      {\n        viewBox: viewBoxOld\n      } = _this$props,\n      restPropsOld = _objectWithoutProperties(_this$props, _excluded2);\n    return !shallowEqual(viewBox, viewBoxOld) || !shallowEqual(restProps, restPropsOld) || !shallowEqual(nextState, this.state);\n  }\n\n  /**\n   * Calculate the coordinates of endpoints in ticks\n   * @param  data The data of a simple tick\n   * @return (x1, y1): The coordinate of endpoint close to tick text\n   *  (x2, y2): The coordinate of endpoint close to axis\n   */\n  getTickLineCoord(data) {\n    var {\n      x,\n      y,\n      width,\n      height,\n      orientation,\n      tickSize,\n      mirror,\n      tickMargin\n    } = this.props;\n    var x1, x2, y1, y2, tx, ty;\n    var sign = mirror ? -1 : 1;\n    var finalTickSize = data.tickSize || tickSize;\n    var tickCoord = isNumber(data.tickCoord) ? data.tickCoord : data.coordinate;\n    switch (orientation) {\n      case 'top':\n        x1 = x2 = data.coordinate;\n        y2 = y + +!mirror * height;\n        y1 = y2 - sign * finalTickSize;\n        ty = y1 - sign * tickMargin;\n        tx = tickCoord;\n        break;\n      case 'left':\n        y1 = y2 = data.coordinate;\n        x2 = x + +!mirror * width;\n        x1 = x2 - sign * finalTickSize;\n        tx = x1 - sign * tickMargin;\n        ty = tickCoord;\n        break;\n      case 'right':\n        y1 = y2 = data.coordinate;\n        x2 = x + +mirror * width;\n        x1 = x2 + sign * finalTickSize;\n        tx = x1 + sign * tickMargin;\n        ty = tickCoord;\n        break;\n      default:\n        x1 = x2 = data.coordinate;\n        y2 = y + +mirror * height;\n        y1 = y2 + sign * finalTickSize;\n        ty = y1 + sign * tickMargin;\n        tx = tickCoord;\n        break;\n    }\n    return {\n      line: {\n        x1,\n        y1,\n        x2,\n        y2\n      },\n      tick: {\n        x: tx,\n        y: ty\n      }\n    };\n  }\n  getTickTextAnchor() {\n    var {\n      orientation,\n      mirror\n    } = this.props;\n    var textAnchor;\n    switch (orientation) {\n      case 'left':\n        textAnchor = mirror ? 'start' : 'end';\n        break;\n      case 'right':\n        textAnchor = mirror ? 'end' : 'start';\n        break;\n      default:\n        textAnchor = 'middle';\n        break;\n    }\n    return textAnchor;\n  }\n  getTickVerticalAnchor() {\n    var {\n      orientation,\n      mirror\n    } = this.props;\n    switch (orientation) {\n      case 'left':\n      case 'right':\n        return 'middle';\n      case 'top':\n        return mirror ? 'start' : 'end';\n      default:\n        return mirror ? 'end' : 'start';\n    }\n  }\n  renderAxisLine() {\n    var {\n      x,\n      y,\n      width,\n      height,\n      orientation,\n      mirror,\n      axisLine\n    } = this.props;\n    var props = _objectSpread(_objectSpread(_objectSpread({}, filterProps(this.props, false)), filterProps(axisLine, false)), {}, {\n      fill: 'none'\n    });\n    if (orientation === 'top' || orientation === 'bottom') {\n      var needHeight = +(orientation === 'top' && !mirror || orientation === 'bottom' && mirror);\n      props = _objectSpread(_objectSpread({}, props), {}, {\n        x1: x,\n        y1: y + needHeight * height,\n        x2: x + width,\n        y2: y + needHeight * height\n      });\n    } else {\n      var needWidth = +(orientation === 'left' && !mirror || orientation === 'right' && mirror);\n      props = _objectSpread(_objectSpread({}, props), {}, {\n        x1: x + needWidth * width,\n        y1: y,\n        x2: x + needWidth * width,\n        y2: y + height\n      });\n    }\n    return /*#__PURE__*/React.createElement(\"line\", _extends({}, props, {\n      className: clsx('recharts-cartesian-axis-line', get(axisLine, 'className'))\n    }));\n  }\n  static renderTickItem(option, props, value) {\n    var tickItem;\n    var combinedClassName = clsx(props.className, 'recharts-cartesian-axis-tick-value');\n    if (/*#__PURE__*/React.isValidElement(option)) {\n      tickItem = /*#__PURE__*/React.cloneElement(option, _objectSpread(_objectSpread({}, props), {}, {\n        className: combinedClassName\n      }));\n    } else if (typeof option === 'function') {\n      tickItem = option(_objectSpread(_objectSpread({}, props), {}, {\n        className: combinedClassName\n      }));\n    } else {\n      var className = 'recharts-cartesian-axis-tick-value';\n      if (typeof option !== 'boolean') {\n        className = clsx(className, option.className);\n      }\n      tickItem = /*#__PURE__*/React.createElement(Text, _extends({}, props, {\n        className: className\n      }), value);\n    }\n    return tickItem;\n  }\n\n  /**\n   * render the ticks\n   * @param {string} fontSize Fontsize to consider for tick spacing\n   * @param {string} letterSpacing Letter spacing to consider for tick spacing\n   * @param {Array} ticks The ticks to actually render (overrides what was passed in props)\n   * @return {ReactElement | null} renderedTicks\n   */\n  renderTicks(fontSize, letterSpacing) {\n    var ticks = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var {\n      tickLine,\n      stroke,\n      tick,\n      tickFormatter,\n      unit\n    } = this.props;\n    // @ts-expect-error some properties are optional in props but required in getTicks\n    var finalTicks = getTicks(_objectSpread(_objectSpread({}, this.props), {}, {\n      ticks\n    }), fontSize, letterSpacing);\n    var textAnchor = this.getTickTextAnchor();\n    var verticalAnchor = this.getTickVerticalAnchor();\n    var axisProps = filterProps(this.props, false);\n    var customTickProps = filterProps(tick, false);\n    var tickLineProps = _objectSpread(_objectSpread({}, axisProps), {}, {\n      fill: 'none'\n    }, filterProps(tickLine, false));\n    var items = finalTicks.map((entry, i) => {\n      var {\n        line: lineCoord,\n        tick: tickCoord\n      } = this.getTickLineCoord(entry);\n      var tickProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n        textAnchor,\n        verticalAnchor\n      }, axisProps), {}, {\n        stroke: 'none',\n        fill: stroke\n      }, customTickProps), tickCoord), {}, {\n        index: i,\n        payload: entry,\n        visibleTicksCount: finalTicks.length,\n        tickFormatter\n      });\n      return /*#__PURE__*/React.createElement(Layer, _extends({\n        className: \"recharts-cartesian-axis-tick\",\n        key: \"tick-\".concat(entry.value, \"-\").concat(entry.coordinate, \"-\").concat(entry.tickCoord)\n      }, adaptEventsOfChild(this.props, entry, i)), tickLine && /*#__PURE__*/React.createElement(\"line\", _extends({}, tickLineProps, lineCoord, {\n        className: clsx('recharts-cartesian-axis-tick-line', get(tickLine, 'className'))\n      })), tick && CartesianAxis.renderTickItem(tick, tickProps, \"\".concat(typeof tickFormatter === 'function' ? tickFormatter(entry.value, i) : entry.value).concat(unit || '')));\n    });\n    return items.length > 0 ? /*#__PURE__*/React.createElement(\"g\", {\n      className: \"recharts-cartesian-axis-ticks\"\n    }, items) : null;\n  }\n  render() {\n    var {\n      axisLine,\n      width,\n      height,\n      className,\n      hide\n    } = this.props;\n    if (hide) {\n      return null;\n    }\n    var {\n      ticks\n    } = this.props;\n\n    /*\n     * This is different condition from what validateWidthHeight is doing;\n     * the CartesianAxis does allow width or height to be undefined.\n     */\n    if (width != null && width <= 0 || height != null && height <= 0) {\n      return null;\n    }\n    return /*#__PURE__*/React.createElement(Layer, {\n      className: clsx('recharts-cartesian-axis', className),\n      ref: _ref2 => {\n        if (_ref2) {\n          var tickNodes = _ref2.getElementsByClassName('recharts-cartesian-axis-tick-value');\n          this.tickRefs.current = Array.from(tickNodes);\n          var tick = tickNodes[0];\n          if (tick) {\n            var calculatedFontSize = window.getComputedStyle(tick).fontSize;\n            var calculatedLetterSpacing = window.getComputedStyle(tick).letterSpacing;\n            if (calculatedFontSize !== this.state.fontSize || calculatedLetterSpacing !== this.state.letterSpacing) {\n              this.setState({\n                fontSize: window.getComputedStyle(tick).fontSize,\n                letterSpacing: window.getComputedStyle(tick).letterSpacing\n              });\n            }\n          }\n        }\n      }\n    }, axisLine && this.renderAxisLine(), this.renderTicks(this.state.fontSize, this.state.letterSpacing, ticks), Label.renderCallByParent(this.props));\n  }\n}\n_defineProperty(CartesianAxis, \"displayName\", 'CartesianAxis');\n_defineProperty(CartesianAxis, \"defaultProps\", {\n  x: 0,\n  y: 0,\n  width: 0,\n  height: 0,\n  viewBox: {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  },\n  // The orientation of axis\n  orientation: 'bottom',\n  // The ticks\n  ticks: [],\n  stroke: '#666',\n  tickLine: true,\n  axisLine: true,\n  tick: true,\n  mirror: false,\n  minTickGap: 5,\n  // The width or height of tick\n  tickSize: 6,\n  tickMargin: 2,\n  interval: 'preserveEnd'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}