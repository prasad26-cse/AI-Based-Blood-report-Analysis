{"ast":null,"code":"var _excluded = [\"children\"];\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nimport * as React from 'react';\nimport { PureComponent, useEffect, useMemo } from 'react';\nimport { clsx } from 'clsx';\nimport { Layer } from '../container/Layer';\nimport { Dot } from '../shape/Dot';\nimport { Polygon } from '../shape/Polygon';\nimport { Text } from '../component/Text';\nimport { adaptEventsOfChild } from '../util/types';\nimport { filterProps } from '../util/ReactUtils';\nimport { getTickClassName, polarToCartesian } from '../util/PolarUtils';\nimport { addAngleAxis, removeAngleAxis } from '../state/polarAxisSlice';\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\nimport { selectPolarAxisScale, selectPolarAxisTicks } from '../state/selectors/polarScaleSelectors';\nimport { selectAngleAxis, selectPolarViewBox } from '../state/selectors/polarAxisSelectors';\nimport { defaultPolarAngleAxisProps } from './defaultPolarAngleAxisProps';\nimport { useIsPanorama } from '../context/PanoramaContext';\nvar RADIAN = Math.PI / 180;\nvar eps = 1e-5;\n\n/**\n * These are injected from Redux, are required, but cannot be set by user.\n */\n\nvar AXIS_TYPE = 'angleAxis';\nfunction SetAngleAxisSettings(props) {\n  var dispatch = useAppDispatch();\n  var settings = useMemo(() => {\n    var {\n        children\n      } = props,\n      rest = _objectWithoutProperties(props, _excluded);\n    return rest;\n  }, [props]);\n  var synchronizedSettings = useAppSelector(state => selectAngleAxis(state, settings.id));\n  var settingsAreSynchronized = settings === synchronizedSettings;\n  useEffect(() => {\n    dispatch(addAngleAxis(settings));\n    return () => {\n      dispatch(removeAngleAxis(settings));\n    };\n  }, [dispatch, settings]);\n  if (settingsAreSynchronized) {\n    return props.children;\n  }\n  return null;\n}\n\n/**\n * Calculate the coordinate of line endpoint\n * @param data The data if there are ticks\n * @param props axis settings\n * @return (x1, y1): The point close to text,\n *         (x2, y2): The point close to axis\n */\nvar getTickLineCoord = (data, props) => {\n  var {\n    cx,\n    cy,\n    radius,\n    orientation,\n    tickSize\n  } = props;\n  var tickLineSize = tickSize || 8;\n  var p1 = polarToCartesian(cx, cy, radius, data.coordinate);\n  var p2 = polarToCartesian(cx, cy, radius + (orientation === 'inner' ? -1 : 1) * tickLineSize, data.coordinate);\n  return {\n    x1: p1.x,\n    y1: p1.y,\n    x2: p2.x,\n    y2: p2.y\n  };\n};\n\n/**\n * Get the text-anchor of each tick\n * @param data Data of ticks\n * @param orientation of the axis ticks\n * @return text-anchor\n */\nvar getTickTextAnchor = (data, orientation) => {\n  var cos = Math.cos(-data.coordinate * RADIAN);\n  if (cos > eps) {\n    return orientation === 'outer' ? 'start' : 'end';\n  }\n  if (cos < -eps) {\n    return orientation === 'outer' ? 'end' : 'start';\n  }\n  return 'middle';\n};\nvar AxisLine = props => {\n  var {\n    cx,\n    cy,\n    radius,\n    axisLineType,\n    axisLine,\n    ticks\n  } = props;\n  if (!axisLine) {\n    return null;\n  }\n  var axisLineProps = _objectSpread(_objectSpread({}, filterProps(props, false)), {}, {\n    fill: 'none'\n  }, filterProps(axisLine, false));\n  if (axisLineType === 'circle') {\n    return /*#__PURE__*/React.createElement(Dot, _extends({\n      className: \"recharts-polar-angle-axis-line\"\n    }, axisLineProps, {\n      cx: cx,\n      cy: cy,\n      r: radius\n    }));\n  }\n  var points = ticks.map(entry => polarToCartesian(cx, cy, radius, entry.coordinate));\n  return /*#__PURE__*/React.createElement(Polygon, _extends({\n    className: \"recharts-polar-angle-axis-line\"\n  }, axisLineProps, {\n    points: points\n  }));\n};\nvar TickItemText = _ref => {\n  var {\n    tick,\n    tickProps,\n    value\n  } = _ref;\n  if (!tick) {\n    return null;\n  }\n  if (/*#__PURE__*/React.isValidElement(tick)) {\n    // @ts-expect-error element cloning makes typescript unhappy and me too\n    return /*#__PURE__*/React.cloneElement(tick, tickProps);\n  }\n  if (typeof tick === 'function') {\n    return tick(tickProps);\n  }\n  return /*#__PURE__*/React.createElement(Text, _extends({}, tickProps, {\n    className: \"recharts-polar-angle-axis-tick-value\"\n  }), value);\n};\nvar Ticks = props => {\n  var {\n    tick,\n    tickLine,\n    tickFormatter,\n    stroke,\n    ticks\n  } = props;\n  var axisProps = filterProps(props, false);\n  var customTickProps = filterProps(tick, false);\n  var tickLineProps = _objectSpread(_objectSpread({}, axisProps), {}, {\n    fill: 'none'\n  }, filterProps(tickLine, false));\n  var items = ticks.map((entry, i) => {\n    var lineCoord = getTickLineCoord(entry, props);\n    var textAnchor = getTickTextAnchor(entry, props.orientation);\n    var tickProps = _objectSpread(_objectSpread(_objectSpread({\n      textAnchor\n    }, axisProps), {}, {\n      stroke: 'none',\n      fill: stroke\n    }, customTickProps), {}, {\n      index: i,\n      payload: entry,\n      x: lineCoord.x2,\n      y: lineCoord.y2\n    });\n    return /*#__PURE__*/React.createElement(Layer, _extends({\n      className: clsx('recharts-polar-angle-axis-tick', getTickClassName(tick)),\n      key: \"tick-\".concat(entry.coordinate)\n    }, adaptEventsOfChild(props, entry, i)), tickLine && /*#__PURE__*/React.createElement(\"line\", _extends({\n      className: \"recharts-polar-angle-axis-tick-line\"\n    }, tickLineProps, lineCoord)), /*#__PURE__*/React.createElement(TickItemText, {\n      tick: tick,\n      tickProps: tickProps,\n      value: tickFormatter ? tickFormatter(entry.value, i) : entry.value\n    }));\n  });\n  return /*#__PURE__*/React.createElement(Layer, {\n    className: \"recharts-polar-angle-axis-ticks\"\n  }, items);\n};\nexport var PolarAngleAxisWrapper = defaultsAndInputs => {\n  var {\n    angleAxisId\n  } = defaultsAndInputs;\n  var viewBox = useAppSelector(selectPolarViewBox);\n  var scale = useAppSelector(state => selectPolarAxisScale(state, 'angleAxis', angleAxisId));\n  var isPanorama = useIsPanorama();\n  var ticks = useAppSelector(state => selectPolarAxisTicks(state, 'angleAxis', angleAxisId, isPanorama));\n  if (viewBox == null || !ticks || !ticks.length) {\n    return null;\n  }\n  var props = _objectSpread(_objectSpread(_objectSpread({}, defaultsAndInputs), {}, {\n    scale\n  }, viewBox), {}, {\n    radius: viewBox.outerRadius\n  });\n  return /*#__PURE__*/React.createElement(Layer, {\n    className: clsx('recharts-polar-angle-axis', AXIS_TYPE, props.className)\n  }, /*#__PURE__*/React.createElement(AxisLine, _extends({}, props, {\n    ticks: ticks\n  })), /*#__PURE__*/React.createElement(Ticks, _extends({}, props, {\n    ticks: ticks\n  })));\n};\nexport class PolarAngleAxis extends PureComponent {\n  render() {\n    if (this.props.radius <= 0) return null;\n    return /*#__PURE__*/React.createElement(SetAngleAxisSettings, {\n      id: this.props.angleAxisId,\n      scale: this.props.scale,\n      type: this.props.type,\n      dataKey: this.props.dataKey,\n      unit: undefined,\n      name: this.props.name,\n      allowDuplicatedCategory: false // Ignoring the prop on purpose because axis calculation behaves as if it was false and Tooltip requires it to be true.\n      ,\n\n      allowDataOverflow: false,\n      reversed: this.props.reversed,\n      includeHidden: false,\n      allowDecimals: this.props.allowDecimals,\n      tickCount: this.props.tickCount\n      // @ts-expect-error the type does not match. Is RadiusAxis really expecting what it says?\n      ,\n\n      ticks: this.props.ticks,\n      tick: this.props.tick,\n      domain: this.props.domain\n    }, /*#__PURE__*/React.createElement(PolarAngleAxisWrapper, this.props));\n  }\n}\n_defineProperty(PolarAngleAxis, \"displayName\", 'PolarAngleAxis');\n_defineProperty(PolarAngleAxis, \"axisType\", AXIS_TYPE);\n_defineProperty(PolarAngleAxis, \"defaultProps\", defaultPolarAngleAxisProps);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}