{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport * as React from 'react';\nimport { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { DefaultTooltipContent } from './DefaultTooltipContent';\nimport { TooltipBoundingBox } from './TooltipBoundingBox';\nimport { Global } from '../util/Global';\nimport { getUniqPayload } from '../util/payload/getUniqPayload';\nimport { useViewBox } from '../context/chartLayoutContext';\nimport { useAccessibilityLayer } from '../context/accessibilityContext';\nimport { useElementOffset } from '../util/useElementOffset';\nimport { Cursor } from './Cursor';\nimport { selectActiveCoordinate, selectActiveLabel, selectIsTooltipActive, selectTooltipPayload } from '../state/selectors/selectors';\nimport { useTooltipPortal } from '../context/tooltipPortalContext';\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\nimport { setTooltipSettingsState } from '../state/tooltipSlice';\nimport { useTooltipChartSynchronisation } from '../synchronisation/useChartSynchronisation';\nimport { useTooltipEventType } from '../state/selectors/selectTooltipEventType';\nimport { resolveDefaultProps } from '../util/resolveDefaultProps';\nfunction defaultUniqBy(entry) {\n  return entry.dataKey;\n}\nfunction renderContent(content, props) {\n  if (/*#__PURE__*/React.isValidElement(content)) {\n    return /*#__PURE__*/React.cloneElement(content, props);\n  }\n  if (typeof content === 'function') {\n    return /*#__PURE__*/React.createElement(content, props);\n  }\n  return /*#__PURE__*/React.createElement(DefaultTooltipContent, props);\n}\nvar emptyPayload = [];\nvar defaultTooltipProps = {\n  allowEscapeViewBox: {\n    x: false,\n    y: false\n  },\n  animationDuration: 400,\n  animationEasing: 'ease',\n  axisId: 0,\n  contentStyle: {},\n  cursor: true,\n  filterNull: true,\n  isAnimationActive: !Global.isSsr,\n  itemSorter: 'name',\n  itemStyle: {},\n  labelStyle: {},\n  offset: 10,\n  reverseDirection: {\n    x: false,\n    y: false\n  },\n  separator: ' : ',\n  trigger: 'hover',\n  useTranslate3d: false,\n  wrapperStyle: {}\n};\nexport function Tooltip(outsideProps) {\n  var props = resolveDefaultProps(outsideProps, defaultTooltipProps);\n  var {\n    active: activeFromProps,\n    allowEscapeViewBox,\n    animationDuration,\n    animationEasing,\n    content,\n    filterNull,\n    isAnimationActive,\n    offset,\n    payloadUniqBy,\n    position,\n    reverseDirection,\n    useTranslate3d,\n    wrapperStyle,\n    cursor,\n    shared,\n    trigger,\n    defaultIndex,\n    portal: portalFromProps,\n    axisId\n  } = props;\n  var dispatch = useAppDispatch();\n  var defaultIndexAsString = typeof defaultIndex === 'number' ? String(defaultIndex) : defaultIndex;\n  useEffect(() => {\n    dispatch(setTooltipSettingsState({\n      shared,\n      trigger,\n      axisId,\n      active: activeFromProps,\n      defaultIndex: defaultIndexAsString\n    }));\n  }, [dispatch, shared, trigger, axisId, activeFromProps, defaultIndexAsString]);\n  var viewBox = useViewBox();\n  var accessibilityLayer = useAccessibilityLayer();\n  var tooltipEventType = useTooltipEventType(shared);\n  var {\n    activeIndex,\n    isActive\n  } = useAppSelector(state => selectIsTooltipActive(state, tooltipEventType, trigger, defaultIndexAsString));\n  var payloadFromRedux = useAppSelector(state => selectTooltipPayload(state, tooltipEventType, trigger, defaultIndexAsString));\n  var labelFromRedux = useAppSelector(state => selectActiveLabel(state, tooltipEventType, trigger, defaultIndexAsString));\n  var coordinate = useAppSelector(state => selectActiveCoordinate(state, tooltipEventType, trigger, defaultIndexAsString));\n  var payload = payloadFromRedux;\n  var tooltipPortalFromContext = useTooltipPortal();\n  /*\n   * The user can set `active=true` on the Tooltip in which case the Tooltip will stay always active,\n   * or `active=false` in which case the Tooltip never shows.\n   *\n   * If the `active` prop is not defined then it will show and hide based on mouse or keyboard activity.\n   */\n  var finalIsActive = activeFromProps !== null && activeFromProps !== void 0 ? activeFromProps : isActive;\n  var [lastBoundingBox, updateBoundingBox] = useElementOffset([payload, finalIsActive]);\n  var finalLabel = tooltipEventType === 'axis' ? labelFromRedux : undefined;\n  useTooltipChartSynchronisation(tooltipEventType, trigger, coordinate, finalLabel, activeIndex, finalIsActive);\n  var tooltipPortal = portalFromProps !== null && portalFromProps !== void 0 ? portalFromProps : tooltipPortalFromContext;\n  if (tooltipPortal == null) {\n    return null;\n  }\n  var finalPayload = payload !== null && payload !== void 0 ? payload : emptyPayload;\n  if (!finalIsActive) {\n    finalPayload = emptyPayload;\n  }\n  if (filterNull && finalPayload.length) {\n    finalPayload = getUniqPayload(payload.filter(entry => entry.value != null && (entry.hide !== true || props.includeHidden)), payloadUniqBy, defaultUniqBy);\n  }\n  var hasPayload = finalPayload.length > 0;\n  var tooltipElement = /*#__PURE__*/React.createElement(TooltipBoundingBox, {\n    allowEscapeViewBox: allowEscapeViewBox,\n    animationDuration: animationDuration,\n    animationEasing: animationEasing,\n    isAnimationActive: isAnimationActive,\n    active: finalIsActive,\n    coordinate: coordinate,\n    hasPayload: hasPayload,\n    offset: offset,\n    position: position,\n    reverseDirection: reverseDirection,\n    useTranslate3d: useTranslate3d,\n    viewBox: viewBox,\n    wrapperStyle: wrapperStyle,\n    lastBoundingBox: lastBoundingBox,\n    innerRef: updateBoundingBox,\n    hasPortalFromProps: Boolean(portalFromProps)\n  }, renderContent(content, _objectSpread(_objectSpread({}, props), {}, {\n    // @ts-expect-error renderContent method expects the payload to be mutable, TODO make it immutable\n    payload: finalPayload,\n    label: finalLabel,\n    active: finalIsActive,\n    coordinate,\n    accessibilityLayer\n  })));\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/createPortal(tooltipElement, tooltipPortal), finalIsActive && /*#__PURE__*/React.createElement(Cursor, {\n    cursor: cursor,\n    tooltipEventType: tooltipEventType,\n    coordinate: coordinate,\n    payload: payload,\n    index: activeIndex\n  }));\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}