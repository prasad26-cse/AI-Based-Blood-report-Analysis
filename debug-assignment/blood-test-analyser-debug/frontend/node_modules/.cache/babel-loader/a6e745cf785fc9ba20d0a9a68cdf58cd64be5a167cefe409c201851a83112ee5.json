{"ast":null,"code":"/**\n * Calculates the width of the Y-axis based on the tick labels and the axis label.\n * @param {Object} params - The parameters object.\n * @param {React.RefObject<any>} params.cartesianAxisRef - The ref to the CartesianAxis component.\n * @param {React.RefObject<Element>} params.labelRef - The ref to the label element.\n * @param {number} [params.labelGapWithTick=5] - The gap between the label and the tick.\n * @returns {number} The calculated width of the Y-axis.\n */\nexport var getCalculatedYAxisWidth = _ref => {\n  var {\n    ticks,\n    label,\n    labelGapWithTick = 5,\n    // Default gap between label and tick\n    tickSize = 0,\n    tickMargin = 0\n  } = _ref;\n  // find the max width of the tick labels\n  var maxTickWidth = 0;\n  if (ticks) {\n    ticks.forEach(tickNode => {\n      if (tickNode) {\n        var bbox = tickNode.getBoundingClientRect();\n        if (bbox.width > maxTickWidth) {\n          maxTickWidth = bbox.width;\n        }\n      }\n    });\n\n    // calculate width of the axis label\n    var labelWidth = label ? label.getBoundingClientRect().width : 0;\n    var tickWidth = tickSize + tickMargin;\n\n    // calculate the updated width of the y-axis\n    var updatedYAxisWidth = maxTickWidth + tickWidth + labelWidth + (label ? labelGapWithTick : 0);\n    return Math.round(updatedYAxisWidth);\n  }\n  return 0;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}