{"ast":null,"code":"var _excluded = [\"direction\", \"width\", \"dataKey\", \"isAnimationActive\", \"animationBegin\", \"animationDuration\", \"animationEasing\"];\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\n/**\n * @fileOverview Render a group of error bar\n */\nimport * as React from 'react';\nimport { Component, createContext, useContext } from 'react';\nimport { Layer } from '../container/Layer';\nimport { filterProps } from '../util/ReactUtils';\nimport { ReportErrorBarSettings, useErrorBarContext } from '../context/CartesianGraphicalItemContext';\nimport { useXAxis, useYAxis } from '../hooks';\nimport { resolveDefaultProps } from '../util/resolveDefaultProps';\nimport { Animate } from '../animation/Animate';\n\n/**\n * So usually the direction is decided by the chart layout.\n * Horizontal layout means error bars are vertical means direction=y\n * Vertical layout means error bars are horizontal means direction=x\n *\n * Except! In Scatter chart, error bars can go both ways.\n *\n * So this property is only ever used in Scatter chart, and ignored elsewhere.\n */\n\n/**\n * External ErrorBar props, visible for users of the library\n */\n\n/**\n * Props after defaults, and required props have been applied.\n */\n\nfunction ErrorBarImpl(props) {\n  var {\n      direction,\n      width,\n      dataKey,\n      isAnimationActive,\n      animationBegin,\n      animationDuration,\n      animationEasing\n    } = props,\n    others = _objectWithoutProperties(props, _excluded);\n  var svgProps = filterProps(others, false);\n  var {\n    data,\n    dataPointFormatter,\n    xAxisId,\n    yAxisId,\n    errorBarOffset: offset\n  } = useErrorBarContext();\n  var xAxis = useXAxis(xAxisId);\n  var yAxis = useYAxis(yAxisId);\n  if ((xAxis === null || xAxis === void 0 ? void 0 : xAxis.scale) == null || (yAxis === null || yAxis === void 0 ? void 0 : yAxis.scale) == null || data == null) {\n    return null;\n  }\n\n  // ErrorBar requires type number XAxis, why?\n  if (direction === 'x' && xAxis.type !== 'number') {\n    return null;\n  }\n  var errorBars = data.map(entry => {\n    var {\n      x,\n      y,\n      value,\n      errorVal\n    } = dataPointFormatter(entry, dataKey, direction);\n    if (!errorVal) {\n      return null;\n    }\n    var lineCoordinates = [];\n    var lowBound, highBound;\n    if (Array.isArray(errorVal)) {\n      [lowBound, highBound] = errorVal;\n    } else {\n      lowBound = highBound = errorVal;\n    }\n    if (direction === 'x') {\n      // error bar for horizontal charts, the y is fixed, x is a range value\n      var {\n        scale\n      } = xAxis;\n      var yMid = y + offset;\n      var yMin = yMid + width;\n      var yMax = yMid - width;\n      var xMin = scale(value - lowBound);\n      var xMax = scale(value + highBound);\n\n      // the right line of |--|\n      lineCoordinates.push({\n        x1: xMax,\n        y1: yMin,\n        x2: xMax,\n        y2: yMax\n      });\n      // the middle line of |--|\n      lineCoordinates.push({\n        x1: xMin,\n        y1: yMid,\n        x2: xMax,\n        y2: yMid\n      });\n      // the left line of |--|\n      lineCoordinates.push({\n        x1: xMin,\n        y1: yMin,\n        x2: xMin,\n        y2: yMax\n      });\n    } else if (direction === 'y') {\n      // error bar for horizontal charts, the x is fixed, y is a range value\n      var {\n        scale: _scale\n      } = yAxis;\n      var xMid = x + offset;\n      var _xMin = xMid - width;\n      var _xMax = xMid + width;\n      var _yMin = _scale(value - lowBound);\n      var _yMax = _scale(value + highBound);\n\n      // the top line\n      lineCoordinates.push({\n        x1: _xMin,\n        y1: _yMax,\n        x2: _xMax,\n        y2: _yMax\n      });\n      // the middle line\n      lineCoordinates.push({\n        x1: xMid,\n        y1: _yMin,\n        x2: xMid,\n        y2: _yMax\n      });\n      // the bottom line\n      lineCoordinates.push({\n        x1: _xMin,\n        y1: _yMin,\n        x2: _xMax,\n        y2: _yMin\n      });\n    }\n    var transformOrigin = \"\".concat(x + offset, \"px \").concat(y + offset, \"px\");\n    return /*#__PURE__*/React.createElement(Layer, _extends({\n      className: \"recharts-errorBar\",\n      key: \"bar-\".concat(lineCoordinates.map(c => \"\".concat(c.x1, \"-\").concat(c.x2, \"-\").concat(c.y1, \"-\").concat(c.y2)))\n    }, svgProps), lineCoordinates.map(coordinates => {\n      var lineStyle = isAnimationActive ? {\n        transformOrigin: \"\".concat(coordinates.x1 - 5, \"px\")\n      } : undefined;\n      return /*#__PURE__*/React.createElement(Animate, {\n        from: {\n          transform: 'scaleY(0)',\n          transformOrigin\n        },\n        to: {\n          transform: 'scaleY(1)',\n          transformOrigin\n        },\n        begin: animationBegin,\n        easing: animationEasing,\n        isActive: isAnimationActive,\n        duration: animationDuration,\n        key: \"line-\".concat(coordinates.x1, \"-\").concat(coordinates.x2, \"-\").concat(coordinates.y1, \"-\").concat(coordinates.y2)\n        // @ts-expect-error TODO - fix the type error\n        ,\n\n        style: {\n          transformOrigin\n        }\n      }, /*#__PURE__*/React.createElement(\"line\", _extends({}, coordinates, {\n        style: lineStyle\n      })));\n    }));\n  });\n  return /*#__PURE__*/React.createElement(Layer, {\n    className: \"recharts-errorBars\"\n  }, errorBars);\n}\nvar ErrorBarPreferredDirection = /*#__PURE__*/createContext(undefined);\nfunction useErrorBarDirection(directionFromProps) {\n  var preferredDirection = useContext(ErrorBarPreferredDirection);\n  if (directionFromProps != null) {\n    return directionFromProps;\n  }\n  if (preferredDirection != null) {\n    return preferredDirection;\n  }\n  return 'x';\n}\nexport function SetErrorBarPreferredDirection(_ref) {\n  var {\n    direction,\n    children\n  } = _ref;\n  return /*#__PURE__*/React.createElement(ErrorBarPreferredDirection.Provider, {\n    value: direction\n  }, children);\n}\nvar errorBarDefaultProps = {\n  stroke: 'black',\n  strokeWidth: 1.5,\n  width: 5,\n  offset: 0,\n  isAnimationActive: true,\n  animationBegin: 0,\n  animationDuration: 400,\n  animationEasing: 'ease-in-out'\n};\nfunction ErrorBarInternal(props) {\n  var realDirection = useErrorBarDirection(props.direction);\n  var {\n    width,\n    isAnimationActive,\n    animationBegin,\n    animationDuration,\n    animationEasing\n  } = resolveDefaultProps(props, errorBarDefaultProps);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReportErrorBarSettings, {\n    dataKey: props.dataKey,\n    direction: realDirection\n  }), /*#__PURE__*/React.createElement(ErrorBarImpl, _extends({}, props, {\n    direction: realDirection,\n    width: width,\n    isAnimationActive: isAnimationActive,\n    animationBegin: animationBegin,\n    animationDuration: animationDuration,\n    animationEasing: animationEasing\n  })));\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class ErrorBar extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(ErrorBarInternal, this.props);\n  }\n}\n_defineProperty(ErrorBar, \"defaultProps\", errorBarDefaultProps);\n_defineProperty(ErrorBar, \"displayName\", 'ErrorBar');","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}