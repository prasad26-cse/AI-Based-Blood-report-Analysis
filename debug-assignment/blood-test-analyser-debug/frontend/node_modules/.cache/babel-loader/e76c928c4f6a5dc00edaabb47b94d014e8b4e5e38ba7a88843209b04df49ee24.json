{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\n/**\n * @fileOverview Reference Line\n */\nimport * as React from 'react';\nimport { Component, useEffect } from 'react';\nimport { clsx } from 'clsx';\nimport { Layer } from '../container/Layer';\nimport { Label } from '../component/Label';\nimport { isNan, isNumOrStr } from '../util/DataUtils';\nimport { createLabeledScales, rectWithCoords } from '../util/CartesianUtils';\nimport { filterProps } from '../util/ReactUtils';\nimport { useViewBox } from '../context/chartLayoutContext';\nimport { addLine, removeLine } from '../state/referenceElementsSlice';\nimport { useAppDispatch, useAppSelector } from '../state/hooks';\nimport { selectAxisScale, selectXAxisSettings, selectYAxisSettings } from '../state/selectors/axisSelectors';\nimport { useIsPanorama } from '../context/PanoramaContext';\nimport { useClipPathId } from '../container/ClipPathProvider';\n\n/**\n * This excludes `viewBox` prop from svg for two reasons:\n * 1. The components wants viewBox of object type, and svg wants string\n *    - so there's a conflict, and the component will throw if it gets string\n * 2. Internally the component calls `filterProps` which filters the viewBox away anyway\n */\n\nvar renderLine = (option, props) => {\n  var line;\n  if (/*#__PURE__*/React.isValidElement(option)) {\n    line = /*#__PURE__*/React.cloneElement(option, props);\n  } else if (typeof option === 'function') {\n    line = option(props);\n  } else {\n    line = /*#__PURE__*/React.createElement(\"line\", _extends({}, props, {\n      className: \"recharts-reference-line-line\"\n    }));\n  }\n  return line;\n};\n// TODO: ScaleHelper\nexport var getEndPoints = (scales, isFixedX, isFixedY, isSegment, viewBox, position, xAxisOrientation, yAxisOrientation, props) => {\n  var {\n    x,\n    y,\n    width,\n    height\n  } = viewBox;\n  if (isFixedY) {\n    var {\n      y: yCoord\n    } = props;\n    var coord = scales.y.apply(yCoord, {\n      position\n    });\n    // don't render the line if the scale can't compute a result that makes sense\n    if (isNan(coord)) return null;\n    if (props.ifOverflow === 'discard' && !scales.y.isInRange(coord)) {\n      return null;\n    }\n    var points = [{\n      x: x + width,\n      y: coord\n    }, {\n      x,\n      y: coord\n    }];\n    return yAxisOrientation === 'left' ? points.reverse() : points;\n  }\n  if (isFixedX) {\n    var {\n      x: xCoord\n    } = props;\n    var _coord = scales.x.apply(xCoord, {\n      position\n    });\n    // don't render the line if the scale can't compute a result that makes sense\n    if (isNan(_coord)) return null;\n    if (props.ifOverflow === 'discard' && !scales.x.isInRange(_coord)) {\n      return null;\n    }\n    var _points = [{\n      x: _coord,\n      y: y + height\n    }, {\n      x: _coord,\n      y\n    }];\n    return xAxisOrientation === 'top' ? _points.reverse() : _points;\n  }\n  if (isSegment) {\n    var {\n      segment\n    } = props;\n    var _points2 = segment.map(p => scales.apply(p, {\n      position\n    }));\n    if (props.ifOverflow === 'discard' && _points2.some(p => !scales.isInRange(p))) {\n      return null;\n    }\n    return _points2;\n  }\n  return null;\n};\nfunction ReportReferenceLine(props) {\n  var dispatch = useAppDispatch();\n  useEffect(() => {\n    dispatch(addLine(props));\n    return () => {\n      dispatch(removeLine(props));\n    };\n  });\n  return null;\n}\nfunction ReferenceLineImpl(props) {\n  var {\n    x: fixedX,\n    y: fixedY,\n    segment,\n    xAxisId,\n    yAxisId,\n    shape,\n    className,\n    ifOverflow\n  } = props;\n  var isPanorama = useIsPanorama();\n  var clipPathId = useClipPathId();\n  var xAxis = useAppSelector(state => selectXAxisSettings(state, xAxisId));\n  var yAxis = useAppSelector(state => selectYAxisSettings(state, yAxisId));\n  var xAxisScale = useAppSelector(state => selectAxisScale(state, 'xAxis', xAxisId, isPanorama));\n  var yAxisScale = useAppSelector(state => selectAxisScale(state, 'yAxis', yAxisId, isPanorama));\n  var viewBox = useViewBox();\n  var isFixedX = isNumOrStr(fixedX);\n  var isFixedY = isNumOrStr(fixedY);\n  if (!clipPathId || !viewBox || xAxis == null || yAxis == null || xAxisScale == null || yAxisScale == null) {\n    return null;\n  }\n  var scales = createLabeledScales({\n    x: xAxisScale,\n    y: yAxisScale\n  });\n  var isSegment = segment && segment.length === 2;\n  var endPoints = getEndPoints(scales, isFixedX, isFixedY, isSegment, viewBox, props.position, xAxis.orientation, yAxis.orientation, props);\n  if (!endPoints) {\n    return null;\n  }\n  var [{\n    x: x1,\n    y: y1\n  }, {\n    x: x2,\n    y: y2\n  }] = endPoints;\n  var clipPath = ifOverflow === 'hidden' ? \"url(#\".concat(clipPathId, \")\") : undefined;\n  var lineProps = _objectSpread(_objectSpread({\n    clipPath\n  }, filterProps(props, true)), {}, {\n    x1,\n    y1,\n    x2,\n    y2\n  });\n  return /*#__PURE__*/React.createElement(Layer, {\n    className: clsx('recharts-reference-line', className)\n  }, renderLine(shape, lineProps), Label.renderCallByParent(props, rectWithCoords({\n    x1,\n    y1,\n    x2,\n    y2\n  })));\n}\nfunction ReferenceLineSettingsDispatcher(props) {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReportReferenceLine, {\n    yAxisId: props.yAxisId,\n    xAxisId: props.xAxisId,\n    ifOverflow: props.ifOverflow,\n    x: props.x,\n    y: props.y\n  }), /*#__PURE__*/React.createElement(ReferenceLineImpl, props));\n}\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport class ReferenceLine extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(ReferenceLineSettingsDispatcher, this.props);\n  }\n}\n_defineProperty(ReferenceLine, \"displayName\", 'ReferenceLine');\n_defineProperty(ReferenceLine, \"defaultProps\", {\n  ifOverflow: 'discard',\n  xAxisId: 0,\n  yAxisId: 0,\n  fill: 'none',\n  stroke: '#ccc',\n  fillOpacity: 1,\n  strokeWidth: 1,\n  position: 'middle'\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}