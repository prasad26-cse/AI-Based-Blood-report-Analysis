{"ast":null,"code":"var _excluded = [\"children\"];\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var n = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (-1 !== e.indexOf(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nimport * as React from 'react';\nimport { createContext, useCallback, useContext, useEffect } from 'react';\nimport { SetCartesianGraphicalItem } from '../state/SetGraphicalItem';\nimport { useIsPanorama } from './PanoramaContext';\nvar noop = () => {};\nvar ErrorBarDirectionDispatchContext = /*#__PURE__*/createContext({\n  addErrorBar: noop,\n  removeErrorBar: noop\n});\nvar initialContextState = {\n  data: [],\n  xAxisId: 'xAxis-0',\n  yAxisId: 'yAxis-0',\n  dataPointFormatter: () => ({\n    x: 0,\n    y: 0,\n    value: 0\n  }),\n  errorBarOffset: 0\n};\nvar ErrorBarContext = /*#__PURE__*/createContext(initialContextState);\nexport function SetErrorBarContext(props) {\n  var {\n      children\n    } = props,\n    rest = _objectWithoutProperties(props, _excluded);\n  return /*#__PURE__*/React.createElement(ErrorBarContext.Provider, {\n    value: rest\n  }, children);\n}\nexport var useErrorBarContext = () => useContext(ErrorBarContext);\nexport var CartesianGraphicalItemContext = _ref => {\n  var {\n    children,\n    xAxisId,\n    yAxisId,\n    zAxisId,\n    dataKey,\n    data,\n    stackId,\n    hide,\n    type,\n    barSize\n  } = _ref;\n  var [errorBars, updateErrorBars] = React.useState([]);\n  // useCallback is necessary in these two because without it, the new function reference causes an infinite render loop\n  var addErrorBar = useCallback(errorBar => {\n    updateErrorBars(prev => [...prev, errorBar]);\n  }, [updateErrorBars]);\n  var removeErrorBar = useCallback(errorBar => {\n    updateErrorBars(prev => prev.filter(eb => eb !== errorBar));\n  }, [updateErrorBars]);\n  var isPanorama = useIsPanorama();\n  return /*#__PURE__*/React.createElement(ErrorBarDirectionDispatchContext.Provider, {\n    value: {\n      addErrorBar,\n      removeErrorBar\n    }\n  }, /*#__PURE__*/React.createElement(SetCartesianGraphicalItem, {\n    type: type,\n    data: data,\n    xAxisId: xAxisId,\n    yAxisId: yAxisId,\n    zAxisId: zAxisId,\n    dataKey: dataKey,\n    errorBars: errorBars,\n    stackId: stackId,\n    hide: hide,\n    barSize: barSize,\n    isPanorama: isPanorama\n  }), children);\n};\nexport function ReportErrorBarSettings(props) {\n  var {\n    addErrorBar,\n    removeErrorBar\n  } = useContext(ErrorBarDirectionDispatchContext);\n  useEffect(() => {\n    addErrorBar(props);\n    return () => {\n      removeErrorBar(props);\n    };\n  }, [addErrorBar, removeErrorBar, props]);\n  return null;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}