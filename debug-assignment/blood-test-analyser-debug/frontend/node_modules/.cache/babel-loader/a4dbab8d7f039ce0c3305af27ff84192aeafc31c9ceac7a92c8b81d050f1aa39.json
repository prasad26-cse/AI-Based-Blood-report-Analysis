{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, Symbol.toStringTag, {\n  value: 'Module'\n});\nconst isUnsafeProperty = require('../../_internal/isUnsafeProperty.js');\nconst isDeepKey = require('../_internal/isDeepKey.js');\nconst toKey = require('../_internal/toKey.js');\nconst toPath = require('../util/toPath.js');\nfunction get(object, path, defaultValue) {\n  if (object == null) {\n    return defaultValue;\n  }\n  switch (typeof path) {\n    case 'string':\n      {\n        if (isUnsafeProperty.isUnsafeProperty(path)) {\n          return defaultValue;\n        }\n        const result = object[path];\n        if (result === undefined) {\n          if (isDeepKey.isDeepKey(path)) {\n            return get(object, toPath.toPath(path), defaultValue);\n          } else {\n            return defaultValue;\n          }\n        }\n        return result;\n      }\n    case 'number':\n    case 'symbol':\n      {\n        if (typeof path === 'number') {\n          path = toKey.toKey(path);\n        }\n        const result = object[path];\n        if (result === undefined) {\n          return defaultValue;\n        }\n        return result;\n      }\n    default:\n      {\n        if (Array.isArray(path)) {\n          return getWithPath(object, path, defaultValue);\n        }\n        if (Object.is(path?.valueOf(), -0)) {\n          path = '-0';\n        } else {\n          path = String(path);\n        }\n        if (isUnsafeProperty.isUnsafeProperty(path)) {\n          return defaultValue;\n        }\n        const result = object[path];\n        if (result === undefined) {\n          return defaultValue;\n        }\n        return result;\n      }\n  }\n}\nfunction getWithPath(object, path, defaultValue) {\n  if (path.length === 0) {\n    return defaultValue;\n  }\n  let current = object;\n  for (let index = 0; index < path.length; index++) {\n    if (current == null) {\n      return defaultValue;\n    }\n    if (isUnsafeProperty.isUnsafeProperty(path[index])) {\n      return defaultValue;\n    }\n    current = current[path[index]];\n  }\n  if (current === undefined) {\n    return defaultValue;\n  }\n  return current;\n}\nexports.get = get;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}