{"ast":null,"code":"function _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { scaleLinear } from 'victory-vendor/d3-scale';\nimport { clsx } from 'clsx';\nimport get from 'es-toolkit/compat/get';\nimport { Surface } from '../container/Surface';\nimport { Layer } from '../container/Layer';\nimport { Sector } from '../shape/Sector';\nimport { Text } from '../component/Text';\nimport { polarToCartesian } from '../util/PolarUtils';\nimport { ReportChartMargin, ReportChartSize } from '../context/chartLayoutContext';\nimport { TooltipPortalContext } from '../context/tooltipPortalContext';\nimport { RechartsWrapper } from './RechartsWrapper';\nimport { mouseLeaveItem, setActiveClickItemIndex, setActiveMouseOverItemIndex } from '../state/tooltipSlice';\nimport { SetTooltipEntrySettings } from '../state/SetTooltipEntrySettings';\nimport { RechartsStoreProvider } from '../state/RechartsStoreProvider';\nimport { useAppDispatch } from '../state/hooks';\nvar defaultTextProps = {\n  fontWeight: 'bold',\n  paintOrder: 'stroke fill',\n  fontSize: '.75rem',\n  stroke: '#FFF',\n  fill: 'black',\n  pointerEvents: 'none'\n};\nfunction getMaxDepthOf(node) {\n  if (!node.children || node.children.length === 0) return 1;\n\n  // Calculate depth for each child and find the maximum\n  var childDepths = node.children.map(d => getMaxDepthOf(d));\n  return 1 + Math.max(...childDepths);\n}\nfunction convertMapToRecord(map) {\n  var record = {};\n  map.forEach((value, key) => {\n    record[key] = value;\n  });\n  return record;\n}\nfunction getTooltipEntrySettings(_ref) {\n  var {\n    dataKey,\n    nameKey,\n    data,\n    stroke,\n    fill,\n    positions\n  } = _ref;\n  return {\n    dataDefinedOnItem: data.children,\n    // Redux store will not accept a Map because it's not serializable\n    positions: convertMapToRecord(positions),\n    // Sunburst does not support many of the properties as other charts do so there's plenty of defaults here\n    settings: {\n      stroke,\n      strokeWidth: undefined,\n      fill,\n      nameKey,\n      dataKey,\n      // if there is a nameKey use it, otherwise make the name of the tooltip the dataKey itself\n      name: nameKey ? undefined : dataKey,\n      hide: false,\n      type: undefined,\n      color: fill,\n      unit: ''\n    }\n  };\n}\n\n// Why is margin not a sunburst prop? No clue. Probably it should be\nvar defaultSunburstMargin = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0\n};\nexport var payloadSearcher = (data, activeIndex) => {\n  return get(data, activeIndex);\n};\nexport var addToSunburstNodeIndex = function addToSunburstNodeIndex(indexInChildrenArr) {\n  var activeTooltipIndexSoFar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return \"\".concat(activeTooltipIndexSoFar, \"children[\").concat(indexInChildrenArr, \"]\");\n};\nvar preloadedState = {\n  options: {\n    validateTooltipEventTypes: ['item'],\n    defaultTooltipEventType: 'item',\n    chartName: 'Sunburst',\n    tooltipPayloadSearcher: payloadSearcher,\n    eventEmitter: undefined\n  }\n};\nvar SunburstChartImpl = _ref2 => {\n  var {\n    className,\n    data,\n    children,\n    width,\n    height,\n    padding = 2,\n    dataKey = 'value',\n    nameKey = 'name',\n    ringPadding = 2,\n    innerRadius = 50,\n    fill = '#333',\n    stroke = '#FFF',\n    textOptions = defaultTextProps,\n    outerRadius = Math.min(width, height) / 2,\n    cx = width / 2,\n    cy = height / 2,\n    startAngle = 0,\n    endAngle = 360,\n    onClick,\n    onMouseEnter,\n    onMouseLeave\n  } = _ref2;\n  var dispatch = useAppDispatch();\n  var rScale = scaleLinear([0, data[dataKey]], [0, endAngle]);\n  var treeDepth = getMaxDepthOf(data);\n  var thickness = (outerRadius - innerRadius) / treeDepth;\n  var sectors = [];\n  var positions = new Map([]);\n  var [tooltipPortal, setTooltipPortal] = useState(null);\n  // event handlers\n  function handleMouseEnter(node, e) {\n    if (onMouseEnter) onMouseEnter(node, e);\n    dispatch(setActiveMouseOverItemIndex({\n      activeIndex: node.tooltipIndex,\n      activeDataKey: dataKey,\n      activeCoordinate: positions.get(node.name)\n    }));\n  }\n  function handleMouseLeave(node, e) {\n    if (onMouseLeave) onMouseLeave(node, e);\n    dispatch(mouseLeaveItem());\n  }\n  function handleClick(node) {\n    if (onClick) onClick(node);\n    dispatch(setActiveClickItemIndex({\n      activeIndex: node.tooltipIndex,\n      activeDataKey: dataKey,\n      activeCoordinate: positions.get(node.name)\n    }));\n  }\n\n  // recursively add nodes for each data point and its children\n  function drawArcs(childNodes, options) {\n    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var {\n      radius,\n      innerR,\n      initialAngle,\n      childColor,\n      nestedActiveTooltipIndex\n    } = options;\n    var currentAngle = initialAngle;\n    if (!childNodes) return; // base case: no children of this node\n\n    childNodes.forEach((d, i) => {\n      var _ref3, _d$fill;\n      var currentTooltipIndex = depth === 1 ? \"[\".concat(i, \"]\") : addToSunburstNodeIndex(i, nestedActiveTooltipIndex);\n      var nodeWithIndex = _objectSpread(_objectSpread({}, d), {}, {\n        tooltipIndex: currentTooltipIndex\n      });\n      var arcLength = rScale(d[dataKey]);\n      var start = currentAngle;\n      // color priority - if there's a color on the individual point use that, otherwise use parent color or default\n      var fillColor = (_ref3 = (_d$fill = d === null || d === void 0 ? void 0 : d.fill) !== null && _d$fill !== void 0 ? _d$fill : childColor) !== null && _ref3 !== void 0 ? _ref3 : fill;\n      var {\n        x: textX,\n        y: textY\n      } = polarToCartesian(0, 0, innerR + radius / 2, -(start + arcLength - arcLength / 2));\n      currentAngle += arcLength;\n      sectors.push(/*#__PURE__*/\n      // eslint-disable-next-line react/no-array-index-key\n      React.createElement(\"g\", {\n        key: \"sunburst-sector-\".concat(d.name, \"-\").concat(i)\n      }, /*#__PURE__*/React.createElement(Sector, {\n        onClick: () => handleClick(nodeWithIndex),\n        onMouseEnter: e => handleMouseEnter(nodeWithIndex, e),\n        onMouseLeave: e => handleMouseLeave(nodeWithIndex, e),\n        fill: fillColor,\n        stroke: stroke,\n        strokeWidth: padding,\n        startAngle: start,\n        endAngle: start + arcLength,\n        innerRadius: innerR,\n        outerRadius: innerR + radius,\n        cx: cx,\n        cy: cy\n      }), /*#__PURE__*/React.createElement(Text, _extends({}, textOptions, {\n        alignmentBaseline: \"middle\",\n        textAnchor: \"middle\",\n        x: textX + cx,\n        y: cy - textY\n      }), d[dataKey])));\n      var {\n        x: tooltipX,\n        y: tooltipY\n      } = polarToCartesian(cx, cy, innerR + radius / 2, start);\n      positions.set(d.name, {\n        x: tooltipX,\n        y: tooltipY\n      });\n      return drawArcs(d.children, {\n        radius,\n        innerR: innerR + radius + ringPadding,\n        initialAngle: start,\n        childColor: fillColor,\n        nestedActiveTooltipIndex: currentTooltipIndex\n      }, depth + 1);\n    });\n  }\n  drawArcs(data.children, {\n    radius: thickness,\n    innerR: innerRadius,\n    initialAngle: startAngle\n  });\n  var layerClass = clsx('recharts-sunburst', className);\n  return /*#__PURE__*/React.createElement(TooltipPortalContext.Provider, {\n    value: tooltipPortal\n  }, /*#__PURE__*/React.createElement(RechartsWrapper, {\n    className: className,\n    width: width\n    // Sunburst doesn't support `style` property, why?\n    ,\n\n    height: height,\n    ref: node => {\n      if (tooltipPortal == null && node != null) {\n        setTooltipPortal(node);\n      }\n    },\n    onMouseEnter: undefined,\n    onMouseLeave: undefined,\n    onClick: undefined,\n    onMouseMove: undefined,\n    onMouseDown: undefined,\n    onMouseUp: undefined,\n    onContextMenu: undefined,\n    onDoubleClick: undefined,\n    onTouchStart: undefined,\n    onTouchMove: undefined,\n    onTouchEnd: undefined\n  }, /*#__PURE__*/React.createElement(Surface, {\n    width: width,\n    height: height\n  }, /*#__PURE__*/React.createElement(Layer, {\n    className: layerClass\n  }, sectors), /*#__PURE__*/React.createElement(SetTooltipEntrySettings, {\n    fn: getTooltipEntrySettings,\n    args: {\n      dataKey,\n      data,\n      stroke,\n      fill,\n      nameKey,\n      positions\n    }\n  }), children)));\n};\nexport var SunburstChart = props => {\n  var _props$className;\n  return /*#__PURE__*/React.createElement(RechartsStoreProvider, {\n    preloadedState: preloadedState,\n    reduxStoreName: (_props$className = props.className) !== null && _props$className !== void 0 ? _props$className : 'SunburstChart'\n  }, /*#__PURE__*/React.createElement(ReportChartSize, {\n    width: props.width,\n    height: props.height\n  }), /*#__PURE__*/React.createElement(ReportChartMargin, {\n    margin: defaultSunburstMargin\n  }), /*#__PURE__*/React.createElement(SunburstChartImpl, props));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}